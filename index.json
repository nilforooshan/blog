[{"content":"I was familiar with the concept of SWAP in memory management until recently when I became familiar with the concept of \u0026ldquo;RAM disk\u0026rdquo;. In this blog post, I introduce both briefly.\nIn computing, memory management is critical to ensuring smooth performance and efficiency, especially as applications become more demanding. Two strategies, SWAP and RAM disk, help manage memory resources, albeit in very different ways.\nWhat is SWAP? SWAP, also known as swap space or swap memory, is a dedicated portion of disk storage set aside to act as an extension of a system\u0026rsquo;s physical memory (RAM). When a computer\u0026rsquo;s RAM is nearly full, the operating system can transfer some data from RAM to the SWAP area to avoid performance bottlenecks when RAM is under pressure. When the RAM cannot accommodate many programs and heavy applications, less active data is moved from the RAM to the SWAP space on the hard drive or SSD. This allows the system to continue running without immediate slowdowns. If that data is needed again, it\u0026rsquo;s \u0026ldquo;swapped in\u0026rdquo;, returning to RAM while another, less-needed piece of data may be swapped out. It should be noted that SWAP is considerably slower than RAM.\nWhat is a RAM disk? A RAM disk is a portion of the physical RAM allocated and treated like a disk drive (HDD or SSD). Unlike SWAP, which is used when RAM is insufficient, a RAM disk uses available RAM as an ultra-fast mounted storage device. The data stored on a RAM disk resides in memory, providing access speeds that are significantly faster than traditional storage media. However, since RAM is volatile, data on a RAM disk is lost once the system shuts down, making it best suited for temporary storage. As such, RAM drive can be used for high-performance computing to read/write files at an exceptional speed. However, the final output (result file) should be retrieved, otherwise it will be lost.\nKey differences between SWAP and RAM disk SWAP and RAM disk are memory management tools serving completely different roles. SWAP uses part of the storage disk to extend RAM. It comes at the cost of a lower speed but allows the system to function when the RAM is full. On the other hand, RAM disk uses part of the RAM as the storage disk. It serves as a temporary storage for ultra-fast read/write cycles of large files. Finally, SWAP is essential for low-memory systems or memory-intensive applications, while RAM disk provides an ultra-fast, volatile storage option for tasks that demand high-speed read/write access.\n","permalink":"https://nilforooshan.github.io/blog/posts/swap-ramdisk/","summary":"\u003cp\u003eI was familiar with the concept of SWAP in memory management until recently when I became familiar with the concept of \u0026ldquo;RAM disk\u0026rdquo;.\nIn this blog post, I introduce both briefly.\u003c/p\u003e\n\u003cp\u003eIn computing, memory management is critical to ensuring smooth performance and efficiency, especially as applications become more demanding.\nTwo strategies, SWAP and RAM disk, help manage memory resources, albeit in very different ways.\u003c/p\u003e\n\u003ch2 id=\"what-is-swap\"\u003eWhat is SWAP?\u003c/h2\u003e\n\u003cp\u003eSWAP, also known as swap space or swap memory, is a dedicated portion of disk storage set aside to act as an extension of a system\u0026rsquo;s physical memory (RAM).\nWhen a computer\u0026rsquo;s RAM is nearly full, the operating system can transfer some data from RAM to the SWAP area to avoid performance bottlenecks when RAM is under pressure.\nWhen the RAM cannot accommodate many programs and heavy applications, less active data is moved from the RAM to the SWAP space on the hard drive or SSD.\nThis allows the system to continue running without immediate slowdowns.\nIf that data is needed again, it\u0026rsquo;s \u0026ldquo;swapped in\u0026rdquo;, returning to RAM while another, less-needed piece of data may be swapped out.\nIt should be noted that SWAP is considerably slower than RAM.\u003c/p\u003e","title":"Understanding SWAP and RAM disk"},{"content":"Clone a repository\ngit clone \u0026lt;sourse\u0026gt; Clone a specific branch of a repository\ngit clone -b \u0026lt;branch\u0026gt; \u0026lt;sourse\u0026gt; Create a local repository\ngit init See the changed files since the last commit\ngit status Add/remove all the current changes to the next commit\ngit add . Commit the changes\ngit commit -m \u0026#34;message\u0026#34; Give commit extra description\ngit commit -m \u0026#34;message Description\u0026#34; See the changes to the tracked files\ngit diff Compare a file between two branches\ngit diff mybranch master -- myfile.cs See the log of the commited changes, starting from the most recent\ngit log See the log of the commited changes for a specific file\ngit log -p \u0026lt;filename\u0026gt; Discard the last commit\ngit reset --hard HEAD^ Discard the last 2 commits\ngit reset --hard HEAD^^ Reset to a specific commit and discard the more recent commits\ngit reset --hard \u0026lt;commit ID\u0026gt; Discard the last commit, but preserving the changes as unstaged changes\ngit reset HEAD^ There is also git revert for reverting back to a previous commit. It will undo changes up to the state before the specified commit ID. git revert is a new commit of a previous commit. It does not discard the latest commits. I found this useful:\ngit revert \u0026lt;commit ID\u0026gt; # We are interested in the commit before this one! # View the files. git reset --hard HEAD^ # Discard the previous revert (commit). This way is even better:\ngit checkout \u0026lt;previous commit ID\u0026gt; git switch - # Get back to the commit from which you checked out to \u0026lt;previous commit ID\u0026gt; (latest commit). Updating local files by downloading the latest changes\ngit pull \u0026lt;remote\u0026gt; \u0026lt;branch\u0026gt; Note that git pull is equivalent to git fetch \u0026amp;\u0026amp; git merge.\nAdd a remote to a local repository\ngit remote add origin https://github.com/\u0026lt;user\u0026gt;/\u0026lt;repo\u0026gt;.git Update the remote address (change of repository name) in a local repository\ngit remote set-url origin https://github.com/\u0026lt;user\u0026gt;/\u0026lt;repo\u0026gt;.git To verify the remote:\ngit remote -v Push local changes to a remote\ngit push -u origin master List the existing branches; the current one is highlighted\ngit branch Create a new branch from the HEAD of the curent branch\ngit branch \u0026lt;branchname\u0026gt; Note that git checkout -b \u0026lt;new-branch\u0026gt; is equivalent to git checkout -b \u0026lt;new-branch\u0026gt; \u0026lt;existing-branch\u0026gt; and git branch \u0026lt;new-branch\u0026gt; \u0026amp;\u0026amp; git checkout \u0026lt;new-branch\u0026gt;.\nCheck-out from the current branch and check-in to a new branch\ngit checkout \u0026lt;branchname\u0026gt; Alternatively, use\ngit switch \u0026lt;branch\u0026gt; Optionally a new branch could be created with either -c or -C options.\nMoving to the master branch and merge the new branch with the master branch\ngit checkout master git merge \u0026lt;branchname\u0026gt; Delete a branch\ngit branch -d \u0026lt;branchname\u0026gt; Use tags to assign milestones such as v1, v1.1 and v2 to a commit. You may have one or multiple tags on a branch.\nList tags\ngit tag Add a tag to the last commit\ngit tag \u0026lt;tagname\u0026gt; Push tags to GitHub\ngit push --tags Delete a tag locally\ngit tag -d \u0026lt;tagname\u0026gt; Delete a locally deleted tag on GitHub\ngit push origin :\u0026lt;tagname\u0026gt; Remove files that are not under version control\ngit clean -f -q To undo the effects of git add and unstage the staged changes, use git restore. Examples are:\ngit restore index.html # Undo the added cahnges to index.html git restore --staged index.html # Undo staged changes to index.html git restore --source 7173808e index.html # Restore index.html to the #7173808e commit Discard uncommitted changes to the README file\ngit checkout README Forgot to make a small change and made a commit? You can amend to the last commit (make changes to the last commit without making a new commit)\nYou can use the same command to change the commit message. If you have already pushed the commit to GitHub.com, you will have to force push a commit with an amended message (git push --force-with-lease origin BRANCHNAME).\ngit commit --amend -m \u0026#34;MESSAGE\u0026#34; Get rid of the deleted branches\ngit remote prune origin ","permalink":"https://nilforooshan.github.io/blog/posts/git-cheat-sheet/","summary":"\u003cp\u003eClone a repository\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit clone \u0026lt;sourse\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eClone a specific branch of a repository\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit clone -b \u0026lt;branch\u0026gt; \u0026lt;sourse\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCreate a local repository\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit init\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSee the changed files since the last commit\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit status\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAdd/remove all the current changes to the next commit\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit add .\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCommit the changes\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit commit -m \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;message\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eGive commit extra description\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit commit -m \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;message\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003eDescription\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSee the changes to the tracked files\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit diff\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCompare a file between two branches\u003c/p\u003e","title":"git cheat sheet"},{"content":"Create a new repository on the command line.\necho \u0026#34;# repository\u0026#34; \u0026gt;\u0026gt; README.md git init git add README.md git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin https://github.com/\u0026lt;USER\u0026gt;/\u0026lt;REPONAME\u0026gt;.git git push -u origin main or push an existing repository from the command line.\ngit remote add origin https://github.com/\u0026lt;USER\u0026gt;/\u0026lt;REPONAME\u0026gt;.git git branch -M main git push -u origin main ","permalink":"https://nilforooshan.github.io/blog/posts/git-quick-start/","summary":"\u003cp\u003eCreate a new repository on the command line.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eecho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;# repository\u0026#34;\u003c/span\u003e \u0026gt;\u0026gt; README.md\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit init\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit add README.md\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit commit -m \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;first commit\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit branch -M main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit remote add origin https://github.com/\u0026lt;USER\u0026gt;/\u0026lt;REPONAME\u0026gt;.git\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit push -u origin main\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor push an existing repository from the command line.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit remote add origin https://github.com/\u0026lt;USER\u0026gt;/\u0026lt;REPONAME\u0026gt;.git\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit branch -M main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit push -u origin main\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"git quick start"},{"content":"Adopted from https://www.youtube.com/playlist?list=PLINDUevGdb7U_ZRLCpqKWutmcY0vCUFOI\nSee Polars Tutorial2 for more.\nReading CSV Files import polars as pl # df = pl.read_csv(\u0026#39;pl_data.csv\u0026#39;) Creating New Columns df = pl.DataFrame({\u0026#39;Name\u0026#39;: [\u0026#39;Mario\u0026#39;, \u0026#39;Luigi\u0026#39;, \u0026#39;Wario\u0026#39;, \u0026#39;Mario\u0026#39;, \u0026#39;Mario\u0026#39;], \u0026#39;Age\u0026#39;: [30,28,26,30,30]}) print(df) shape: (5, 2)\r┌───────┬─────┐\r│ Name ┆ Age │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞═══════╪═════╡\r│ Mario ┆ 30 │\r│ Luigi ┆ 28 │\r│ Wario ┆ 26 │\r│ Mario ┆ 30 │\r│ Mario ┆ 30 │\r└───────┴─────┘ score_values = pl.Series([95,99,94,90,96]) df = df.with_columns(Score = pl.lit(score_values), Score_x2 = pl.lit(score_values*2)) print(df) shape: (5, 4)\r┌───────┬─────┬───────┬──────────┐\r│ Name ┆ Age ┆ Score ┆ Score_x2 │\r│ --- ┆ --- ┆ --- ┆ --- │\r│ str ┆ i64 ┆ i64 ┆ i64 │\r╞═══════╪═════╪═══════╪══════════╡\r│ Mario ┆ 30 ┆ 95 ┆ 190 │\r│ Luigi ┆ 28 ┆ 99 ┆ 198 │\r│ Wario ┆ 26 ┆ 94 ┆ 188 │\r│ Mario ┆ 30 ┆ 90 ┆ 180 │\r│ Mario ┆ 30 ┆ 96 ┆ 192 │\r└───────┴─────┴───────┴──────────┘ Dropping Columns print(df.drop(\u0026#39;Score_x2\u0026#39;)) print(df.drop(\u0026#39;Score_x2\u0026#39;, \u0026#39;Score\u0026#39;)) print(df.drop([\u0026#39;Score_x2\u0026#39;, \u0026#39;Score\u0026#39;])) df.drop_in_place(\u0026#39;Score_x2\u0026#39;) print(df) shape: (5, 3)\r┌───────┬─────┬───────┐\r│ Name ┆ Age ┆ Score │\r│ --- ┆ --- ┆ --- │\r│ str ┆ i64 ┆ i64 │\r╞═══════╪═════╪═══════╡\r│ Mario ┆ 30 ┆ 95 │\r│ Luigi ┆ 28 ┆ 99 │\r│ Wario ┆ 26 ┆ 94 │\r│ Mario ┆ 30 ┆ 90 │\r│ Mario ┆ 30 ┆ 96 │\r└───────┴─────┴───────┘\rshape: (5, 2)\r┌───────┬─────┐\r│ Name ┆ Age │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞═══════╪═════╡\r│ Mario ┆ 30 │\r│ Luigi ┆ 28 │\r│ Wario ┆ 26 │\r│ Mario ┆ 30 │\r│ Mario ┆ 30 │\r└───────┴─────┘\rshape: (5, 2)\r┌───────┬─────┐\r│ Name ┆ Age │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞═══════╪═════╡\r│ Mario ┆ 30 │\r│ Luigi ┆ 28 │\r│ Wario ┆ 26 │\r│ Mario ┆ 30 │\r│ Mario ┆ 30 │\r└───────┴─────┘\rshape: (5, 3)\r┌───────┬─────┬───────┐\r│ Name ┆ Age ┆ Score │\r│ --- ┆ --- ┆ --- │\r│ str ┆ i64 ┆ i64 │\r╞═══════╪═════╪═══════╡\r│ Mario ┆ 30 ┆ 95 │\r│ Luigi ┆ 28 ┆ 99 │\r│ Wario ┆ 26 ┆ 94 │\r│ Mario ┆ 30 ┆ 90 │\r│ Mario ┆ 30 ┆ 96 │\r└───────┴─────┴───────┘ Drop Duplicate Rows df = pl.DataFrame({\u0026#39;Name\u0026#39;: [\u0026#39;Mario\u0026#39;, \u0026#39;Luigi\u0026#39;, \u0026#39;Wario\u0026#39;, \u0026#39;Mario\u0026#39;, \u0026#39;Mario\u0026#39;], \u0026#39;Age\u0026#39;: [30,28,26,30,30]}) print(df.unique()) shape: (3, 2)\r┌───────┬─────┐\r│ Name ┆ Age │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞═══════╪═════╡\r│ Mario ┆ 30 │\r│ Luigi ┆ 28 │\r│ Wario ┆ 26 │\r└───────┴─────┘ Iterating Polars Dataframes for row in df.rows(): print(row) print(row[0]) (\u0026#39;Mario\u0026#39;, 30)\rMario\r(\u0026#39;Luigi\u0026#39;, 28)\rLuigi\r(\u0026#39;Wario\u0026#39;, 26)\rWario\r(\u0026#39;Mario\u0026#39;, 30)\rMario\r(\u0026#39;Mario\u0026#39;, 30)\rMario Plot Polars Dataframe import matplotlib.pyplot as plt df = pl.DataFrame({\u0026#39;Date\u0026#39;: [\u0026#39;1/1/2023\u0026#39;,\u0026#39;1/2/2023\u0026#39;,\u0026#39;1/3/2023\u0026#39;,\u0026#39;1/4/2023\u0026#39;,\u0026#39;1/5/2023\u0026#39;,\u0026#39;1/6/2023\u0026#39;,\u0026#39;1/7/2023\u0026#39;,\u0026#39;1/8/2023\u0026#39;,\u0026#39;1/9/2023\u0026#39;,\u0026#39;1/10/2023\u0026#39;], \u0026#39;Price\u0026#39;: [15,16,16,15,14,13,14,17,16,18]}) dates = list(df[\u0026#39;Date\u0026#39;]) prices = list(df[\u0026#39;Price\u0026#39;]) plt.plot(dates, prices) plt.show() Converting Polars Dataframe To Pandas This operation requires that both pandas and pyarrow are installed.\nx = df.to_pandas() print(type(df)) print(type(x)) print(df) print(x) \u0026lt;class \u0026#39;polars.dataframe.frame.DataFrame\u0026#39;\u0026gt;\r\u0026lt;class \u0026#39;pandas.core.frame.DataFrame\u0026#39;\u0026gt;\rshape: (10, 2)\r┌───────────┬───────┐\r│ Date ┆ Price │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞═══════════╪═══════╡\r│ 1/1/2023 ┆ 15 │\r│ 1/2/2023 ┆ 16 │\r│ 1/3/2023 ┆ 16 │\r│ 1/4/2023 ┆ 15 │\r│ 1/5/2023 ┆ 14 │\r│ 1/6/2023 ┆ 13 │\r│ 1/7/2023 ┆ 14 │\r│ 1/8/2023 ┆ 17 │\r│ 1/9/2023 ┆ 16 │\r│ 1/10/2023 ┆ 18 │\r└───────────┴───────┘\rDate Price\r0 1/1/2023 15\r1 1/2/2023 16\r2 1/3/2023 16\r3 1/4/2023 15\r4 1/5/2023 14\r5 1/6/2023 13\r6 1/7/2023 14\r7 1/8/2023 17\r8 1/9/2023 16\r9 1/10/2023 18 Filtering Polars Dataframes print(df.filter(df[\u0026#39;Price\u0026#39;] \u0026gt; 15)) print(df.filter((df[\u0026#39;Price\u0026#39;] \u0026gt; 15) \u0026amp; (df[\u0026#39;Price\u0026#39;] \u0026lt; 17))) shape: (5, 2)\r┌───────────┬───────┐\r│ Date ┆ Price │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞═══════════╪═══════╡\r│ 1/2/2023 ┆ 16 │\r│ 1/3/2023 ┆ 16 │\r│ 1/8/2023 ┆ 17 │\r│ 1/9/2023 ┆ 16 │\r│ 1/10/2023 ┆ 18 │\r└───────────┴───────┘\rshape: (3, 2)\r┌──────────┬───────┐\r│ Date ┆ Price │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞══════════╪═══════╡\r│ 1/2/2023 ┆ 16 │\r│ 1/3/2023 ┆ 16 │\r│ 1/9/2023 ┆ 16 │\r└──────────┴───────┘ Joining/merging Polars Dataframes df1 = pl.DataFrame({ \u0026#39;key\u0026#39;: [\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;], \u0026#39;value_left\u0026#39;: [1, 2, 3, 4] }) df2 = pl.DataFrame({ \u0026#39;key\u0026#39;: [\u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;], \u0026#39;value_left\u0026#39;: [5, 6, 7, 8] }) joined_df = df1.join(df2, on = \u0026#39;key\u0026#39;) print(joined_df) joined_df = df1.join(df2, on = \u0026#39;key\u0026#39;, how = \u0026#39;left\u0026#39;) print(joined_df) shape: (3, 3)\r┌─────┬────────────┬──────────────────┐\r│ key ┆ value_left ┆ value_left_right │\r│ --- ┆ --- ┆ --- │\r│ str ┆ i64 ┆ i64 │\r╞═════╪════════════╪══════════════════╡\r│ B ┆ 2 ┆ 5 │\r│ C ┆ 3 ┆ 6 │\r│ D ┆ 4 ┆ 7 │\r└─────┴────────────┴──────────────────┘\rshape: (4, 3)\r┌─────┬────────────┬──────────────────┐\r│ key ┆ value_left ┆ value_left_right │\r│ --- ┆ --- ┆ --- │\r│ str ┆ i64 ┆ i64 │\r╞═════╪════════════╪══════════════════╡\r│ A ┆ 1 ┆ null │\r│ B ┆ 2 ┆ 5 │\r│ C ┆ 3 ┆ 6 │\r│ D ┆ 4 ┆ 7 │\r└─────┴────────────┴──────────────────┘ Aggregate Data df = pl.DataFrame({ \u0026#39;Name\u0026#39;: [\u0026#39;Chris\u0026#39;, \u0026#39;Chris\u0026#39;, \u0026#39;Kyle\u0026#39;, \u0026#39;John\u0026#39;, \u0026#39;John\u0026#39;, \u0026#39;Chris\u0026#39;, \u0026#39;Kyle\u0026#39;], \u0026#39;Calories\u0026#39;: [100,200,50,100,350,150,450] }) df2 = df.group_by([\u0026#39;Name\u0026#39;]).agg( sum_ = pl.col(\u0026#39;Calories\u0026#39;).sum(), count_ = pl.col(\u0026#39;Calories\u0026#39;).count() ) print(df2) shape: (3, 3)\r┌───────┬──────┬────────┐\r│ Name ┆ sum_ ┆ count_ │\r│ --- ┆ --- ┆ --- │\r│ str ┆ i64 ┆ u32 │\r╞═══════╪══════╪════════╡\r│ Kyle ┆ 500 ┆ 2 │\r│ Chris ┆ 450 ┆ 3 │\r│ John ┆ 450 ┆ 2 │\r└───────┴──────┴────────┘ Sorting print(df.sort([\u0026#39;Name\u0026#39;, \u0026#39;Calories\u0026#39;])) shape: (7, 2)\r┌───────┬──────────┐\r│ Name ┆ Calories │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞═══════╪══════════╡\r│ Chris ┆ 100 │\r│ Chris ┆ 150 │\r│ Chris ┆ 200 │\r│ John ┆ 100 │\r│ John ┆ 350 │\r│ Kyle ┆ 50 │\r│ Kyle ┆ 450 │\r└───────┴──────────┘ Renaming Columns renamed_col = df.rename({\u0026#39;Name\u0026#39;: \u0026#39;ID\u0026#39;, \u0026#39;Calories\u0026#39;: \u0026#39;Consumption\u0026#39;}) print(renamed_col) shape: (7, 2)\r┌───────┬─────────────┐\r│ ID ┆ Consumption │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞═══════╪═════════════╡\r│ Chris ┆ 100 │\r│ Chris ┆ 200 │\r│ Kyle ┆ 50 │\r│ John ┆ 100 │\r│ John ┆ 350 │\r│ Chris ┆ 150 │\r│ Kyle ┆ 450 │\r└───────┴─────────────┘ Select Columns print(df2.select([\u0026#39;Name\u0026#39;, \u0026#39;count_\u0026#39;])) shape: (3, 2)\r┌───────┬────────┐\r│ Name ┆ count_ │\r│ --- ┆ --- │\r│ str ┆ u32 │\r╞═══════╪════════╡\r│ Kyle ┆ 2 │\r│ Chris ┆ 3 │\r│ John ┆ 2 │\r└───────┴────────┘ Fill/Drop Null Values df = pl.DataFrame({ \u0026#39;Name\u0026#39;: [\u0026#39;John\u0026#39;, \u0026#39;Steven\u0026#39;, \u0026#39;Chris\u0026#39;, None], \u0026#39;Age\u0026#39;: [20, 25, None, 32], \u0026#39;Score\u0026#39;: [99, None, 100, None] }) print(df) fill_df = df.fill_null(\u0026#39;NULL_STRING\u0026#39;) print(fill_df) fill_df = df.fill_null(0) print(fill_df) print(df.drop_nulls()) print(fill_df.drop_nulls()) shape: (4, 3)\r┌────────┬──────┬───────┐\r│ Name ┆ Age ┆ Score │\r│ --- ┆ --- ┆ --- │\r│ str ┆ i64 ┆ i64 │\r╞════════╪══════╪═══════╡\r│ John ┆ 20 ┆ 99 │\r│ Steven ┆ 25 ┆ null │\r│ Chris ┆ null ┆ 100 │\r│ null ┆ 32 ┆ null │\r└────────┴──────┴───────┘\rshape: (4, 3)\r┌─────────────┬──────┬───────┐\r│ Name ┆ Age ┆ Score │\r│ --- ┆ --- ┆ --- │\r│ str ┆ i64 ┆ i64 │\r╞═════════════╪══════╪═══════╡\r│ John ┆ 20 ┆ 99 │\r│ Steven ┆ 25 ┆ null │\r│ Chris ┆ null ┆ 100 │\r│ NULL_STRING ┆ 32 ┆ null │\r└─────────────┴──────┴───────┘\rshape: (4, 3)\r┌────────┬─────┬───────┐\r│ Name ┆ Age ┆ Score │\r│ --- ┆ --- ┆ --- │\r│ str ┆ i64 ┆ i64 │\r╞════════╪═════╪═══════╡\r│ John ┆ 20 ┆ 99 │\r│ Steven ┆ 25 ┆ 0 │\r│ Chris ┆ 0 ┆ 100 │\r│ null ┆ 32 ┆ 0 │\r└────────┴─────┴───────┘\rshape: (1, 3)\r┌──────┬─────┬───────┐\r│ Name ┆ Age ┆ Score │\r│ --- ┆ --- ┆ --- │\r│ str ┆ i64 ┆ i64 │\r╞══════╪═════╪═══════╡\r│ John ┆ 20 ┆ 99 │\r└──────┴─────┴───────┘\rshape: (3, 3)\r┌────────┬─────┬───────┐\r│ Name ┆ Age ┆ Score │\r│ --- ┆ --- ┆ --- │\r│ str ┆ i64 ┆ i64 │\r╞════════╪═════╪═══════╡\r│ John ┆ 20 ┆ 99 │\r│ Steven ┆ 25 ┆ 0 │\r│ Chris ┆ 0 ┆ 100 │\r└────────┴─────┴───────┘ Convert String To Date df = pl.DataFrame({\u0026#39;Date\u0026#39;: [\u0026#39;1/1/2023\u0026#39;,\u0026#39;1/2/2023\u0026#39;,\u0026#39;1/3/2023\u0026#39;,\u0026#39;1/4/2023\u0026#39;,\u0026#39;1/5/2023\u0026#39;,\u0026#39;1/6/2023\u0026#39;,\u0026#39;1/7/2023\u0026#39;,\u0026#39;1/8/2023\u0026#39;,\u0026#39;1/9/2023\u0026#39;,\u0026#39;1/10/2023\u0026#39;], \u0026#39;Price\u0026#39;: [15,16,16,15,14,13,14,17,16,18]}) df = df.with_columns(Date2 = df[\u0026#39;Date\u0026#39;].str.to_date()) print(df) df = df.with_columns(Date3 = df[\u0026#39;Date2\u0026#39;].dt.strftime(\u0026#39;%m%Y\u0026#39;)) print(df) shape: (10, 3)\r┌───────────┬───────┬────────────┐\r│ Date ┆ Price ┆ Date2 │\r│ --- ┆ --- ┆ --- │\r│ str ┆ i64 ┆ date │\r╞═══════════╪═══════╪════════════╡\r│ 1/1/2023 ┆ 15 ┆ 2023-01-01 │\r│ 1/2/2023 ┆ 16 ┆ 2023-02-01 │\r│ 1/3/2023 ┆ 16 ┆ 2023-03-01 │\r│ 1/4/2023 ┆ 15 ┆ 2023-04-01 │\r│ 1/5/2023 ┆ 14 ┆ 2023-05-01 │\r│ 1/6/2023 ┆ 13 ┆ 2023-06-01 │\r│ 1/7/2023 ┆ 14 ┆ 2023-07-01 │\r│ 1/8/2023 ┆ 17 ┆ 2023-08-01 │\r│ 1/9/2023 ┆ 16 ┆ 2023-09-01 │\r│ 1/10/2023 ┆ 18 ┆ 2023-10-01 │\r└───────────┴───────┴────────────┘\rshape: (10, 4)\r┌───────────┬───────┬────────────┬────────┐\r│ Date ┆ Price ┆ Date2 ┆ Date3 │\r│ --- ┆ --- ┆ --- ┆ --- │\r│ str ┆ i64 ┆ date ┆ str │\r╞═══════════╪═══════╪════════════╪════════╡\r│ 1/1/2023 ┆ 15 ┆ 2023-01-01 ┆ 012023 │\r│ 1/2/2023 ┆ 16 ┆ 2023-02-01 ┆ 022023 │\r│ 1/3/2023 ┆ 16 ┆ 2023-03-01 ┆ 032023 │\r│ 1/4/2023 ┆ 15 ┆ 2023-04-01 ┆ 042023 │\r│ 1/5/2023 ┆ 14 ┆ 2023-05-01 ┆ 052023 │\r│ 1/6/2023 ┆ 13 ┆ 2023-06-01 ┆ 062023 │\r│ 1/7/2023 ┆ 14 ┆ 2023-07-01 ┆ 072023 │\r│ 1/8/2023 ┆ 17 ┆ 2023-08-01 ┆ 082023 │\r│ 1/9/2023 ┆ 16 ┆ 2023-09-01 ┆ 092023 │\r│ 1/10/2023 ┆ 18 ┆ 2023-10-01 ┆ 102023 │\r└───────────┴───────┴────────────┴────────┘ Change Column Data Type df = df.with_columns(Price = df[\u0026#39;Price\u0026#39;].cast(pl.Utf8)) print(df) df = df.with_columns(Price = df[\u0026#39;Price\u0026#39;].cast(str)) print(df) df = df.with_columns(Price = df[\u0026#39;Price\u0026#39;].cast(pl.Float64)) print(df) shape: (10, 4)\r┌───────────┬───────┬────────────┬────────┐\r│ Date ┆ Price ┆ Date2 ┆ Date3 │\r│ --- ┆ --- ┆ --- ┆ --- │\r│ str ┆ str ┆ date ┆ str │\r╞═══════════╪═══════╪════════════╪════════╡\r│ 1/1/2023 ┆ 15 ┆ 2023-01-01 ┆ 012023 │\r│ 1/2/2023 ┆ 16 ┆ 2023-02-01 ┆ 022023 │\r│ 1/3/2023 ┆ 16 ┆ 2023-03-01 ┆ 032023 │\r│ 1/4/2023 ┆ 15 ┆ 2023-04-01 ┆ 042023 │\r│ 1/5/2023 ┆ 14 ┆ 2023-05-01 ┆ 052023 │\r│ 1/6/2023 ┆ 13 ┆ 2023-06-01 ┆ 062023 │\r│ 1/7/2023 ┆ 14 ┆ 2023-07-01 ┆ 072023 │\r│ 1/8/2023 ┆ 17 ┆ 2023-08-01 ┆ 082023 │\r│ 1/9/2023 ┆ 16 ┆ 2023-09-01 ┆ 092023 │\r│ 1/10/2023 ┆ 18 ┆ 2023-10-01 ┆ 102023 │\r└───────────┴───────┴────────────┴────────┘\rshape: (10, 4)\r┌───────────┬───────┬────────────┬────────┐\r│ Date ┆ Price ┆ Date2 ┆ Date3 │\r│ --- ┆ --- ┆ --- ┆ --- │\r│ str ┆ str ┆ date ┆ str │\r╞═══════════╪═══════╪════════════╪════════╡\r│ 1/1/2023 ┆ 15 ┆ 2023-01-01 ┆ 012023 │\r│ 1/2/2023 ┆ 16 ┆ 2023-02-01 ┆ 022023 │\r│ 1/3/2023 ┆ 16 ┆ 2023-03-01 ┆ 032023 │\r│ 1/4/2023 ┆ 15 ┆ 2023-04-01 ┆ 042023 │\r│ 1/5/2023 ┆ 14 ┆ 2023-05-01 ┆ 052023 │\r│ 1/6/2023 ┆ 13 ┆ 2023-06-01 ┆ 062023 │\r│ 1/7/2023 ┆ 14 ┆ 2023-07-01 ┆ 072023 │\r│ 1/8/2023 ┆ 17 ┆ 2023-08-01 ┆ 082023 │\r│ 1/9/2023 ┆ 16 ┆ 2023-09-01 ┆ 092023 │\r│ 1/10/2023 ┆ 18 ┆ 2023-10-01 ┆ 102023 │\r└───────────┴───────┴────────────┴────────┘\rshape: (10, 4)\r┌───────────┬───────┬────────────┬────────┐\r│ Date ┆ Price ┆ Date2 ┆ Date3 │\r│ --- ┆ --- ┆ --- ┆ --- │\r│ str ┆ f64 ┆ date ┆ str │\r╞═══════════╪═══════╪════════════╪════════╡\r│ 1/1/2023 ┆ 15.0 ┆ 2023-01-01 ┆ 012023 │\r│ 1/2/2023 ┆ 16.0 ┆ 2023-02-01 ┆ 022023 │\r│ 1/3/2023 ┆ 16.0 ┆ 2023-03-01 ┆ 032023 │\r│ 1/4/2023 ┆ 15.0 ┆ 2023-04-01 ┆ 042023 │\r│ 1/5/2023 ┆ 14.0 ┆ 2023-05-01 ┆ 052023 │\r│ 1/6/2023 ┆ 13.0 ┆ 2023-06-01 ┆ 062023 │\r│ 1/7/2023 ┆ 14.0 ┆ 2023-07-01 ┆ 072023 │\r│ 1/8/2023 ┆ 17.0 ┆ 2023-08-01 ┆ 082023 │\r│ 1/9/2023 ┆ 16.0 ┆ 2023-09-01 ┆ 092023 │\r│ 1/10/2023 ┆ 18.0 ┆ 2023-10-01 ┆ 102023 │\r└───────────┴───────┴────────────┴────────┘ Shift Values df = df.with_columns(Shifted = df[\u0026#39;Date3\u0026#39;].shift(1) .fill_null(\u0026#39;SHIFTED\u0026#39;)) print(df) shape: (10, 5)\r┌───────────┬───────┬────────────┬────────┬─────────┐\r│ Date ┆ Price ┆ Date2 ┆ Date3 ┆ Shifted │\r│ --- ┆ --- ┆ --- ┆ --- ┆ --- │\r│ str ┆ f64 ┆ date ┆ str ┆ str │\r╞═══════════╪═══════╪════════════╪════════╪═════════╡\r│ 1/1/2023 ┆ 15.0 ┆ 2023-01-01 ┆ 012023 ┆ SHIFTED │\r│ 1/2/2023 ┆ 16.0 ┆ 2023-02-01 ┆ 022023 ┆ 012023 │\r│ 1/3/2023 ┆ 16.0 ┆ 2023-03-01 ┆ 032023 ┆ 022023 │\r│ 1/4/2023 ┆ 15.0 ┆ 2023-04-01 ┆ 042023 ┆ 032023 │\r│ 1/5/2023 ┆ 14.0 ┆ 2023-05-01 ┆ 052023 ┆ 042023 │\r│ 1/6/2023 ┆ 13.0 ┆ 2023-06-01 ┆ 062023 ┆ 052023 │\r│ 1/7/2023 ┆ 14.0 ┆ 2023-07-01 ┆ 072023 ┆ 062023 │\r│ 1/8/2023 ┆ 17.0 ┆ 2023-08-01 ┆ 082023 ┆ 072023 │\r│ 1/9/2023 ┆ 16.0 ┆ 2023-09-01 ┆ 092023 ┆ 082023 │\r│ 1/10/2023 ┆ 18.0 ┆ 2023-10-01 ┆ 102023 ┆ 092023 │\r└───────────┴───────┴────────────┴────────┴─────────┘ Export Polars Dataframe To CSV There are other file formats you can export the DataFrame into, such as write_excel and write_parquet.\n# df.write_csv(\u0026#39;df.csv\u0026#39;) Read Multi-Sheet Excel File # Read the first sheet. # df = pl.read_excel(\u0026#39;data2.xlsx\u0026#39;) # Read the second sheet called \u0026#34;Sheet2\u0026#34;. # df = pl.read_excel(\u0026#39;data2.xlsx\u0026#39;, sheet_name = \u0026#39;Sheet2\u0026#39;) Reading Text Files Read a text file with | delimited columns.\n# df = pl.read_csv(\u0026#39;pipe_sep.txt\u0026#39;, seperator = \u0026#39;|\u0026#39;) ","permalink":"https://nilforooshan.github.io/blog/posts/polars-tutorial/","summary":"\u003cp\u003eAdopted from \u003ca href=\"https://www.youtube.com/playlist?list=PLINDUevGdb7U_ZRLCpqKWutmcY0vCUFOI\"\u003ehttps://www.youtube.com/playlist?list=PLINDUevGdb7U_ZRLCpqKWutmcY0vCUFOI\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eSee \u003ca href=\"https://gist.github.com/nilforooshan/77f7fd0bbf8332460434045829777b24\"\u003ePolars Tutorial2\u003c/a\u003e for more.\u003c/p\u003e\n\u003ch2 id=\"reading-csv-files\"\u003eReading CSV Files\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e polars \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e pl\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# df = pl.read_csv(\u0026#39;pl_data.csv\u0026#39;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"creating-new-columns\"\u003eCreating New Columns\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Name\u0026#39;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Mario\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Luigi\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Wario\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Mario\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Mario\u0026#39;\u003c/span\u003e], \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Age\u0026#39;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e26\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e]})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (5, 2)\r\n┌───────┬─────┐\r\n│ Name  ┆ Age │\r\n│ ---   ┆ --- │\r\n│ str   ┆ i64 │\r\n╞═══════╪═════╡\r\n│ Mario ┆ 30  │\r\n│ Luigi ┆ 28  │\r\n│ Wario ┆ 26  │\r\n│ Mario ┆ 30  │\r\n│ Mario ┆ 30  │\r\n└───────┴─────┘\n\u003c/code\u003e\u003c/pre\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003escore_values \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eSeries([\u003cspan style=\"color:#ae81ff\"\u003e95\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e99\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e94\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e90\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e96\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith_columns(Score \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elit(score_values),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                     Score_x2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elit(score_values\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (5, 4)\r\n┌───────┬─────┬───────┬──────────┐\r\n│ Name  ┆ Age ┆ Score ┆ Score_x2 │\r\n│ ---   ┆ --- ┆ ---   ┆ ---      │\r\n│ str   ┆ i64 ┆ i64   ┆ i64      │\r\n╞═══════╪═════╪═══════╪══════════╡\r\n│ Mario ┆ 30  ┆ 95    ┆ 190      │\r\n│ Luigi ┆ 28  ┆ 99    ┆ 198      │\r\n│ Wario ┆ 26  ┆ 94    ┆ 188      │\r\n│ Mario ┆ 30  ┆ 90    ┆ 180      │\r\n│ Mario ┆ 30  ┆ 96    ┆ 192      │\r\n└───────┴─────┴───────┴──────────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"dropping-columns\"\u003eDropping Columns\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edrop(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Score_x2\u0026#39;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edrop(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Score_x2\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Score\u0026#39;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edrop([\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Score_x2\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Score\u0026#39;\u003c/span\u003e]))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edrop_in_place(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Score_x2\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (5, 3)\r\n┌───────┬─────┬───────┐\r\n│ Name  ┆ Age ┆ Score │\r\n│ ---   ┆ --- ┆ ---   │\r\n│ str   ┆ i64 ┆ i64   │\r\n╞═══════╪═════╪═══════╡\r\n│ Mario ┆ 30  ┆ 95    │\r\n│ Luigi ┆ 28  ┆ 99    │\r\n│ Wario ┆ 26  ┆ 94    │\r\n│ Mario ┆ 30  ┆ 90    │\r\n│ Mario ┆ 30  ┆ 96    │\r\n└───────┴─────┴───────┘\r\nshape: (5, 2)\r\n┌───────┬─────┐\r\n│ Name  ┆ Age │\r\n│ ---   ┆ --- │\r\n│ str   ┆ i64 │\r\n╞═══════╪═════╡\r\n│ Mario ┆ 30  │\r\n│ Luigi ┆ 28  │\r\n│ Wario ┆ 26  │\r\n│ Mario ┆ 30  │\r\n│ Mario ┆ 30  │\r\n└───────┴─────┘\r\nshape: (5, 2)\r\n┌───────┬─────┐\r\n│ Name  ┆ Age │\r\n│ ---   ┆ --- │\r\n│ str   ┆ i64 │\r\n╞═══════╪═════╡\r\n│ Mario ┆ 30  │\r\n│ Luigi ┆ 28  │\r\n│ Wario ┆ 26  │\r\n│ Mario ┆ 30  │\r\n│ Mario ┆ 30  │\r\n└───────┴─────┘\r\nshape: (5, 3)\r\n┌───────┬─────┬───────┐\r\n│ Name  ┆ Age ┆ Score │\r\n│ ---   ┆ --- ┆ ---   │\r\n│ str   ┆ i64 ┆ i64   │\r\n╞═══════╪═════╪═══════╡\r\n│ Mario ┆ 30  ┆ 95    │\r\n│ Luigi ┆ 28  ┆ 99    │\r\n│ Wario ┆ 26  ┆ 94    │\r\n│ Mario ┆ 30  ┆ 90    │\r\n│ Mario ┆ 30  ┆ 96    │\r\n└───────┴─────┴───────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"drop-duplicate-rows\"\u003eDrop Duplicate Rows\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Name\u0026#39;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Mario\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Luigi\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Wario\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Mario\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Mario\u0026#39;\u003c/span\u003e], \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Age\u0026#39;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e26\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e]})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eunique())\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (3, 2)\r\n┌───────┬─────┐\r\n│ Name  ┆ Age │\r\n│ ---   ┆ --- │\r\n│ str   ┆ i64 │\r\n╞═══════╪═════╡\r\n│ Mario ┆ 30  │\r\n│ Luigi ┆ 28  │\r\n│ Wario ┆ 26  │\r\n└───────┴─────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"iterating-polars-dataframes\"\u003eIterating Polars Dataframes\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e row \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erows():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(row)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(row[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e(\u0026#39;Mario\u0026#39;, 30)\r\nMario\r\n(\u0026#39;Luigi\u0026#39;, 28)\r\nLuigi\r\n(\u0026#39;Wario\u0026#39;, 26)\r\nWario\r\n(\u0026#39;Mario\u0026#39;, 30)\r\nMario\r\n(\u0026#39;Mario\u0026#39;, 30)\r\nMario\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"plot-polars-dataframe\"\u003ePlot Polars Dataframe\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e matplotlib.pyplot \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e plt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Date\u0026#39;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1/1/2023\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1/2/2023\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1/3/2023\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1/4/2023\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1/5/2023\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1/6/2023\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1/7/2023\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1/8/2023\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1/9/2023\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1/10/2023\u0026#39;\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                   \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Price\u0026#39;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e16\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e16\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e14\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e14\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e17\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e16\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e18\u003c/span\u003e]})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edates \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e list(df[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Date\u0026#39;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprices \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e list(df[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Price\u0026#39;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eplt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eplot(dates, prices)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eplt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eshow()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../../images/Polars-Tutorial-img1.png\"\u003e\u003c/p\u003e","title":"Polars Tutorial"},{"content":"Most of these commands are derived with the help of ChatGPT or stackoverflow. However, it is easier to look for a command here rather than searching for the answers to these questions over and over again.\nThere might be a few Python examples here not directly related to Polars!\nRead . as missing value import polars as pl # df = pl.read_csv(\u0026#34;your_file.csv\u0026#34;, null_values=\u0026#34;.\u0026#34;, has_header = True) Replace . with missing value df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [\u0026#34;.\u0026#34;, \u0026#34;AB456\u0026#34;, \u0026#34;GK789\u0026#34;, \u0026#34;.\u0026#34;], \u0026#34;col2\u0026#34;: [10, 20, 30, 40], \u0026#34;col3\u0026#34;: [1, 2, 3, 4] }) df = df.with_columns(pl.col(pl.String).replace({\u0026#34;.\u0026#34;: None})) print(df) shape: (4, 3)\r┌───────┬──────┬──────┐\r│ col1 ┆ col2 ┆ col3 │\r│ --- ┆ --- ┆ --- │\r│ str ┆ i64 ┆ i64 │\r╞═══════╪══════╪══════╡\r│ null ┆ 10 ┆ 1 │\r│ AB456 ┆ 20 ┆ 2 │\r│ GK789 ┆ 30 ┆ 3 │\r│ null ┆ 40 ┆ 4 │\r└───────┴──────┴──────┘ Get column names df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [\u0026#34;GK123\u0026#34;, \u0026#34;AB456\u0026#34;, \u0026#34;GK789\u0026#34;, \u0026#34;CD012\u0026#34;], \u0026#34;col2\u0026#34;: [10, 20, 30, 40], \u0026#34;col3\u0026#34;: [1, 2, 3, 4] }) print(df.columns) # Get the last two columns print(df.columns[-2:]) # Get the first two columns print(df.columns[:2]) [\u0026#39;col1\u0026#39;, \u0026#39;col2\u0026#39;, \u0026#39;col3\u0026#39;]\r[\u0026#39;col2\u0026#39;, \u0026#39;col3\u0026#39;]\r[\u0026#39;col1\u0026#39;, \u0026#39;col2\u0026#39;] Change values in a column based on a condition in another column df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [\u0026#34;GK123\u0026#34;, \u0026#34;AB456\u0026#34;, \u0026#34;GK789\u0026#34;, \u0026#34;CD012\u0026#34;], \u0026#34;col2\u0026#34;: [10, 20, 30, 40] }) # Replace values in \u0026#39;col2\u0026#39; based on the condition that \u0026#39;col1\u0026#39; starts with \u0026#39;GK\u0026#39; df = df.with_columns( pl.when(pl.col(\u0026#34;col1\u0026#34;).str.starts_with(\u0026#34;GK\u0026#34;)) .then(999) # Replace with your desired value .otherwise(pl.col(\u0026#34;col2\u0026#34;)) # Keep original value if condition is not met .alias(\u0026#34;col2\u0026#34;) ) print(df) shape: (4, 2)\r┌───────┬──────┐\r│ col1 ┆ col2 │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞═══════╪══════╡\r│ GK123 ┆ 999 │\r│ AB456 ┆ 20 │\r│ GK789 ┆ 999 │\r│ CD012 ┆ 40 │\r└───────┴──────┘ Change values in a column based on multiple conditions in another column df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [\u0026#34;GK123\u0026#34;, \u0026#34;AB456\u0026#34;, \u0026#34;GK789\u0026#34;, \u0026#34;CD012\u0026#34;], \u0026#34;col2\u0026#34;: [10, 25, 30, 40] }) # Replace values in \u0026#39;col2\u0026#39; based on multiple conditions df = df.with_columns( pl.when((pl.col(\u0026#34;col1\u0026#34;).str.starts_with(\u0026#34;GK\u0026#34;)) \u0026amp; (pl.col(\u0026#34;col2\u0026#34;) \u0026gt; 20)) .then(999) # Replace with your desired value .otherwise(pl.col(\u0026#34;col2\u0026#34;)) # Keep original value if conditions are not met .alias(\u0026#34;col2\u0026#34;) ) print(df) df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [\u0026#34;GK123\u0026#34;, \u0026#34;AB456\u0026#34;, \u0026#34;GK789\u0026#34;, \u0026#34;CD012\u0026#34;], \u0026#34;col2\u0026#34;: [10, 25, 30, 40] }) df = df.with_columns( pl.when(pl.col(\u0026#34;col2\u0026#34;) \u0026lt; 11).then(20) .when(pl.col(\u0026#34;col2\u0026#34;) \u0026gt; 33).then(pl.col(\u0026#34;col2\u0026#34;) * 2) .otherwise(pl.col(\u0026#34;col2\u0026#34;)) .alias(\u0026#34;col2\u0026#34;) ) print(df) shape: (4, 2)\r┌───────┬──────┐\r│ col1 ┆ col2 │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞═══════╪══════╡\r│ GK123 ┆ 10 │\r│ AB456 ┆ 25 │\r│ GK789 ┆ 999 │\r│ CD012 ┆ 40 │\r└───────┴──────┘\rshape: (4, 2)\r┌───────┬──────┐\r│ col1 ┆ col2 │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞═══════╪══════╡\r│ GK123 ┆ 20 │\r│ AB456 ┆ 25 │\r│ GK789 ┆ 30 │\r│ CD012 ┆ 80 │\r└───────┴──────┘ Extract a column into a vector col1_vector = df[\u0026#34;col1\u0026#34;].to_list() print(col1_vector) [\u0026#39;GK123\u0026#39;, \u0026#39;AB456\u0026#39;, \u0026#39;GK789\u0026#39;, \u0026#39;CD012\u0026#39;] Extract values meeting a condition from a column df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [1, 2, 3], \u0026#34;col2\u0026#34;: [4, 5, 6] }) # Extract values from \u0026#39;col1\u0026#39; that are greater than 1 filtered_values = df.filter(pl.col(\u0026#34;col1\u0026#34;) \u0026gt; 1)[\u0026#34;col1\u0026#34;].to_list() print(filtered_values) [2, 3] Get the dimension of the DataFrame df.shape (3, 2) Paste a text string to a range of numbers # Generate the sequence from 1001 to 1010 and concatenate \u0026#34;DK\u0026#34; with each value result = [f\u0026#34;DK{1000 + i}\u0026#34; for i in range(1, 11)] print(result) result = [\u0026#34;DK\u0026#34; + str(i) for i in range(1001, 1011)] print(result) [\u0026#39;DK1001\u0026#39;, \u0026#39;DK1002\u0026#39;, \u0026#39;DK1003\u0026#39;, \u0026#39;DK1004\u0026#39;, \u0026#39;DK1005\u0026#39;, \u0026#39;DK1006\u0026#39;, \u0026#39;DK1007\u0026#39;, \u0026#39;DK1008\u0026#39;, \u0026#39;DK1009\u0026#39;, \u0026#39;DK1010\u0026#39;]\r[\u0026#39;DK1001\u0026#39;, \u0026#39;DK1002\u0026#39;, \u0026#39;DK1003\u0026#39;, \u0026#39;DK1004\u0026#39;, \u0026#39;DK1005\u0026#39;, \u0026#39;DK1006\u0026#39;, \u0026#39;DK1007\u0026#39;, \u0026#39;DK1008\u0026#39;, \u0026#39;DK1009\u0026#39;, \u0026#39;DK1010\u0026#39;] Remove Initial characters in a string list string_list = [\u0026#34;AB123\u0026#34;, \u0026#34;CD456\u0026#34;, \u0026#34;EF789\u0026#34;, \u0026#34;GH012\u0026#34;] # Remove the first two characters from each string modified_list = [s[2:] for s in string_list] print(modified_list) [\u0026#39;123\u0026#39;, \u0026#39;456\u0026#39;, \u0026#39;789\u0026#39;, \u0026#39;012\u0026#39;] Copy a column into another when a condition is met df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [\u0026#34;GK123\u0026#34;, \u0026#34;AB456\u0026#34;, \u0026#34;GK789\u0026#34;, \u0026#34;CD012\u0026#34;], \u0026#34;col2\u0026#34;: [10, 20, 30, 40] }) # Copy \u0026#39;col2\u0026#39; to \u0026#39;col1\u0026#39; where \u0026#39;col1\u0026#39; starts with \u0026#39;GK\u0026#39; df = df.with_columns( pl.when(pl.col(\u0026#34;col1\u0026#34;).str.starts_with(\u0026#34;GK\u0026#34;)) .then(pl.col(\u0026#34;col2\u0026#34;)) # Copy \u0026#39;col2\u0026#39; value to \u0026#39;col1\u0026#39; .otherwise(pl.col(\u0026#34;col1\u0026#34;)) # Keep original \u0026#39;col1\u0026#39; value if condition is not met .alias(\u0026#34;col1\u0026#34;) ) print(df) shape: (4, 2)\r┌───────┬──────┐\r│ col1 ┆ col2 │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞═══════╪══════╡\r│ 10 ┆ 10 │\r│ AB456 ┆ 20 │\r│ 30 ┆ 30 │\r│ CD012 ┆ 40 │\r└───────┴──────┘ Copy a list into a DataFrame column when a condition is met df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [\u0026#34;GK123\u0026#34;, \u0026#34;AB456\u0026#34;, \u0026#34;GK789\u0026#34;, \u0026#34;CD012\u0026#34;], \u0026#34;col2\u0026#34;: [10, 20, 30, 40] }) new_values = [\u0026#34;XY987\u0026#34;, \u0026#34;ZW654\u0026#34;, \u0026#34;XY987\u0026#34;, \u0026#34;ZW654\u0026#34;] # Copy \u0026#39;new_values\u0026#39; to \u0026#39;col1\u0026#39; where \u0026#39;col1\u0026#39; starts with \u0026#39;GK\u0026#39; df = df.with_columns( pl.when(pl.col(\u0026#34;col1\u0026#34;).str.starts_with(\u0026#34;GK\u0026#34;)) .then(pl.Series(new_values)) # Assign new values with the same shape .otherwise(pl.col(\u0026#34;col1\u0026#34;)) .alias(\u0026#34;col1\u0026#34;) ) print(df) shape: (4, 2)\r┌───────┬──────┐\r│ col1 ┆ col2 │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞═══════╪══════╡\r│ XY987 ┆ 10 │\r│ AB456 ┆ 20 │\r│ XY987 ┆ 30 │\r│ CD012 ┆ 40 │\r└───────┴──────┘ Copy a list into a column df = df.with_columns(pl.Series(\u0026#34;col1\u0026#34;, new_values)) print(df) df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [\u0026#34;GK123\u0026#34;, \u0026#34;AB456\u0026#34;, \u0026#34;GK789\u0026#34;, \u0026#34;CD012\u0026#34;], \u0026#34;col2\u0026#34;: [10, 20, 30, 40] }) df = df.with_columns(col1 = pl.lit(pl.Series(new_values))) print(df) shape: (4, 2)\r┌───────┬──────┐\r│ col1 ┆ col2 │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞═══════╪══════╡\r│ XY987 ┆ 10 │\r│ ZW654 ┆ 20 │\r│ XY987 ┆ 30 │\r│ ZW654 ┆ 40 │\r└───────┴──────┘\rshape: (4, 2)\r┌───────┬──────┐\r│ col1 ┆ col2 │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞═══════╪══════╡\r│ XY987 ┆ 10 │\r│ ZW654 ┆ 20 │\r│ XY987 ┆ 30 │\r│ ZW654 ┆ 40 │\r└───────┴──────┘ Copy row-sums (rowSums) of columns \u0026ldquo;a\u0026rdquo; and \u0026ldquo;b\u0026rdquo; into column \u0026ldquo;a\u0026rdquo; df = pl.DataFrame({ \u0026#34;a\u0026#34;: [1, 2, 3], \u0026#34;b\u0026#34;: [4, 5, 6] }) # Compute the row-wise sum of columns \u0026#34;a\u0026#34; and \u0026#34;b\u0026#34; and store it in column \u0026#34;a\u0026#34; df = df.with_columns( (pl.col(\u0026#34;a\u0026#34;) + pl.col(\u0026#34;b\u0026#34;)).alias(\u0026#34;a\u0026#34;) ) print(df) shape: (3, 2)\r┌─────┬─────┐\r│ a ┆ b │\r│ --- ┆ --- │\r│ i64 ┆ i64 │\r╞═════╪═════╡\r│ 5 ┆ 4 │\r│ 7 ┆ 5 │\r│ 9 ┆ 6 │\r└─────┴─────┘ Drop columns with the column name ending with a pattern df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [1, 2, 3], \u0026#34;col2_right\u0026#34;: [4, 5, 6], \u0026#34;col3\u0026#34;: [7, 8, 9], \u0026#34;col4_right\u0026#34;: [10, 11, 12] }) # Drop columns that end with \u0026#34;_right\u0026#34; df = df.select([col for col in df.columns if not col.endswith(\u0026#34;_right\u0026#34;)]) print(df) shape: (3, 2)\r┌──────┬──────┐\r│ col1 ┆ col3 │\r│ --- ┆ --- │\r│ i64 ┆ i64 │\r╞══════╪══════╡\r│ 1 ┆ 7 │\r│ 2 ┆ 8 │\r│ 3 ┆ 9 │\r└──────┴──────┘ Rename columns with the column name ending with a pattern df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [1, 2, 3], \u0026#34;col2_right\u0026#34;: [4, 5, 6], \u0026#34;col3\u0026#34;: [7, 8, 9], \u0026#34;col4_right\u0026#34;: [10, 11, 12] }) # Rename columns ending with \u0026#34;_right\u0026#34; to \u0026#34;d*\u0026#34; (d1, d2, ...) new_names = {} counter = 1 for col in df.columns: if col.endswith(\u0026#34;_right\u0026#34;): new_names[col] = f\u0026#34;d{counter}\u0026#34; counter += 1 # Apply the renaming df = df.rename(new_names) print(df) df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [1, 2, 3], \u0026#34;col2_right\u0026#34;: [4, 5, 6], \u0026#34;col3\u0026#34;: [7, 8, 9], \u0026#34;col4_right\u0026#34;: [10, 11, 12] }) # Create a dictionary to hold the renaming mappings new_names = {} # Iterate through the columns and rename those ending with \u0026#34;_right\u0026#34; for col in df.columns: if col.endswith(\u0026#34;_right\u0026#34;): # Extract the part before \u0026#34;_right\u0026#34; and prepend \u0026#34;d\u0026#34; base_name = col.split(\u0026#34;_right\u0026#34;)[0] new_names[col] = f\u0026#34;d{base_name}\u0026#34; # Apply the renaming df = df.rename(new_names) print(df) shape: (3, 4)\r┌──────┬─────┬──────┬─────┐\r│ col1 ┆ d1 ┆ col3 ┆ d2 │\r│ --- ┆ --- ┆ --- ┆ --- │\r│ i64 ┆ i64 ┆ i64 ┆ i64 │\r╞══════╪═════╪══════╪═════╡\r│ 1 ┆ 4 ┆ 7 ┆ 10 │\r│ 2 ┆ 5 ┆ 8 ┆ 11 │\r│ 3 ┆ 6 ┆ 9 ┆ 12 │\r└──────┴─────┴──────┴─────┘\rshape: (3, 4)\r┌──────┬───────┬──────┬───────┐\r│ col1 ┆ dcol2 ┆ col3 ┆ dcol4 │\r│ --- ┆ --- ┆ --- ┆ --- │\r│ i64 ┆ i64 ┆ i64 ┆ i64 │\r╞══════╪═══════╪══════╪═══════╡\r│ 1 ┆ 4 ┆ 7 ┆ 10 │\r│ 2 ┆ 5 ┆ 8 ┆ 11 │\r│ 3 ┆ 6 ┆ 9 ┆ 12 │\r└──────┴───────┴──────┴───────┘ Rename columns based on column index df = pl.DataFrame({ \u0026#34;original1\u0026#34;: [\u0026#34;123-456\u0026#34;, \u0026#34;789-012\u0026#34;, \u0026#34;345-678\u0026#34;], \u0026#34;original2\u0026#34;: [1, 2, 3], \u0026#34;original3\u0026#34;: [10, 20, 30] }) # Get the first two column names old_names = df.columns[:2] # New names for the first two columns new_names = [\u0026#34;col1\u0026#34;, \u0026#34;col2\u0026#34;] # Rename the first two columns df = df.rename({old_names[0]: new_names[0], old_names[1]: new_names[1]}) print(df) shape: (3, 3)\r┌─────────┬──────┬───────────┐\r│ col1 ┆ col2 ┆ original3 │\r│ --- ┆ --- ┆ --- │\r│ str ┆ i64 ┆ i64 │\r╞═════════╪══════╪═══════════╡\r│ 123-456 ┆ 1 ┆ 10 │\r│ 789-012 ┆ 2 ┆ 20 │\r│ 345-678 ┆ 3 ┆ 30 │\r└─────────┴──────┴───────────┘ Rename all columns with a list df = pl.DataFrame({ \u0026#34;old_name1\u0026#34;: [1, 2, 3], \u0026#34;old_name2\u0026#34;: [4, 5, 6], \u0026#34;old_name3\u0026#34;: [7, 8, 9] }) # List of new column names new_column_names = [\u0026#34;new_name1\u0026#34;, \u0026#34;new_name2\u0026#34;, \u0026#34;new_name3\u0026#34;] # Rename all columns df = df.rename({old: new for old, new in zip(df.columns, new_column_names)}) print(df) shape: (3, 3)\r┌───────────┬───────────┬───────────┐\r│ new_name1 ┆ new_name2 ┆ new_name3 │\r│ --- ┆ --- ┆ --- │\r│ i64 ┆ i64 ┆ i64 │\r╞═══════════╪═══════════╪═══════════╡\r│ 1 ┆ 4 ┆ 7 │\r│ 2 ┆ 5 ┆ 8 │\r│ 3 ┆ 6 ┆ 9 │\r└───────────┴───────────┴───────────┘ The difference between .str.replace and .str.replace_all df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [\u0026#34;123-456-34\u0026#34;, \u0026#34;789-012-78\u0026#34;, \u0026#34;345-678-02\u0026#34;], \u0026#34;col2\u0026#34;: [1, 2, 3] }) # Replace \u0026#34;-\u0026#34; with \u0026#34;\u0026#34; in the \u0026#34;col1\u0026#34; column df = df.with_columns( pl.col(\u0026#34;col1\u0026#34;).str.replace(\u0026#34;-\u0026#34;, \u0026#34;\u0026#34;).alias(\u0026#34;col1\u0026#34;) ) print(df) df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [\u0026#34;123-456\u0026#34;, \u0026#34;789-012\u0026#34;, \u0026#34;345-678\u0026#34;], \u0026#34;col2\u0026#34;: [1, 2, 3] }) # Replace \u0026#34;-\u0026#34; with \u0026#34;\u0026#34; in the \u0026#34;col1\u0026#34; column df = df.with_columns( pl.col(\u0026#34;col1\u0026#34;).str.replace_all(\u0026#34;-\u0026#34;, \u0026#34;\u0026#34;).alias(\u0026#34;col1\u0026#34;) ) print(df) shape: (3, 2)\r┌───────────┬──────┐\r│ col1 ┆ col2 │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞═══════════╪══════╡\r│ 123456-34 ┆ 1 │\r│ 789012-78 ┆ 2 │\r│ 345678-02 ┆ 3 │\r└───────────┴──────┘\rshape: (3, 2)\r┌────────┬──────┐\r│ col1 ┆ col2 │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞════════╪══════╡\r│ 123456 ┆ 1 │\r│ 789012 ┆ 2 │\r│ 345678 ┆ 3 │\r└────────┴──────┘ Read specific columns from a CSV file # df = pl.read_csv(\u0026#34;data.csv\u0026#34;, columns=[0, 2]) Replace null with 0 in the last two columns df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [1, 2, 3], \u0026#34;col2\u0026#34;: [None, 5, None], \u0026#34;col3\u0026#34;: [7, None, 9] }) # Replace null with 0 in the last two columns df = df.with_columns( [pl.col(df.columns[-2:]).fill_null(0)] ) print(df) shape: (3, 3)\r┌──────┬──────┬──────┐\r│ col1 ┆ col2 ┆ col3 │\r│ --- ┆ --- ┆ --- │\r│ i64 ┆ i64 ┆ i64 │\r╞══════╪══════╪══════╡\r│ 1 ┆ 0 ┆ 7 │\r│ 2 ┆ 5 ┆ 0 │\r│ 3 ┆ 0 ┆ 9 │\r└──────┴──────┴──────┘ Drop the first two characters from all elements in a DataFrame df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [\u0026#34;ab123\u0026#34;, \u0026#34;ab456\u0026#34;, \u0026#34;ab789\u0026#34;], \u0026#34;col2\u0026#34;: [\u0026#34;cd001\u0026#34;, \u0026#34;cd002\u0026#34;, \u0026#34;cd003\u0026#34;] }) # Drop the first two characters from all elements in the DataFrame df = df.with_columns( [pl.col(c).str.slice(2) for c in df.columns] ) print(df) # Now, do the same, but turn the resulting elements into integers. df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [\u0026#34;ab123\u0026#34;, \u0026#34;ab456\u0026#34;, \u0026#34;ab789\u0026#34;], \u0026#34;col2\u0026#34;: [\u0026#34;cd001\u0026#34;, \u0026#34;cd002\u0026#34;, \u0026#34;cd003\u0026#34;] }) # Drop the first two characters and convert the remaining strings to integers df = df.with_columns( [pl.col(c).str.slice(2).cast(pl.Int64) for c in df.columns] ) print(df) shape: (3, 2)\r┌──────┬──────┐\r│ col1 ┆ col2 │\r│ --- ┆ --- │\r│ str ┆ str │\r╞══════╪══════╡\r│ 123 ┆ 001 │\r│ 456 ┆ 002 │\r│ 789 ┆ 003 │\r└──────┴──────┘\rshape: (3, 2)\r┌──────┬──────┐\r│ col1 ┆ col2 │\r│ --- ┆ --- │\r│ i64 ┆ i64 │\r╞══════╪══════╡\r│ 123 ┆ 1 │\r│ 456 ┆ 2 │\r│ 789 ┆ 3 │\r└──────┴──────┘ Drop a column by its index number df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [1, 2, 3], \u0026#34;col2\u0026#34;: [4, 5, 6], \u0026#34;col3\u0026#34;: [7, 8, 9] }) # Drop the first column by its index (0) df = df.drop(df.columns[0]) print(df) shape: (3, 2)\r┌──────┬──────┐\r│ col2 ┆ col3 │\r│ --- ┆ --- │\r│ i64 ┆ i64 │\r╞══════╪══════╡\r│ 4 ┆ 7 │\r│ 5 ┆ 8 │\r│ 6 ┆ 9 │\r└──────┴──────┘ Reorder columns df.select([\u0026#39;col3\u0026#39;, \u0026#39;col2\u0026#39;]) shape: (3, 2)col3col2i64i64748596\rdf.select([pl.col(\u0026#39;col3\u0026#39;), pl.col(\u0026#39;col2\u0026#39;)]) shape: (3, 2)col3col2i64i64748596\rReorder DataFrame\u0026rsquo;s rows by matching a column with a list df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [\u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;e\u0026#34;, \u0026#34;d\u0026#34;], \u0026#34;col2\u0026#34;: [1, 2, 3, 4, 5] }) # The desired order for \u0026#34;col1\u0026#34; desired_order = [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;e\u0026#34;] # Reorder the DataFrame by matching \u0026#34;col1\u0026#34; with the desired_order list df_reordered = df.with_columns( pl.col(\u0026#34;col1\u0026#34;).map_elements(lambda x: desired_order.index(x), return_dtype=pl.Int64).alias(\u0026#34;sort_key\u0026#34;) ).sort(\u0026#34;sort_key\u0026#34;).drop(\u0026#34;sort_key\u0026#34;) print(df_reordered) # or df_reordered = df.join(pl.DataFrame({\u0026#34;col1\u0026#34;: desired_order}), on = \u0026#34;col1\u0026#34;) print(df_reordered) shape: (5, 2)\r┌──────┬──────┐\r│ col1 ┆ col2 │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞══════╪══════╡\r│ a ┆ 3 │\r│ b ┆ 1 │\r│ c ┆ 2 │\r│ d ┆ 5 │\r│ e ┆ 4 │\r└──────┴──────┘\rshape: (5, 2)\r┌──────┬──────┐\r│ col1 ┆ col2 │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞══════╪══════╡\r│ a ┆ 3 │\r│ b ┆ 1 │\r│ c ┆ 2 │\r│ d ┆ 5 │\r│ e ┆ 4 │\r└──────┴──────┘ Filter the DataFrame for elements containing a pattern in a column df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [\u0026#34;abc123\u0026#34;, \u0026#34;def456\u0026#34;, \u0026#34;ghi789\u0026#34;, \u0026#34;abcxyz\u0026#34;], \u0026#34;col2\u0026#34;: [1, 2, 3, 4] }) # Filter rows where \u0026#34;col1\u0026#34; contains the pattern \u0026#34;abc\u0026#34; filtered_df = df.filter(pl.col(\u0026#34;col1\u0026#34;).str.contains(\u0026#34;abc\u0026#34;)) print(filtered_df) shape: (2, 2)\r┌────────┬──────┐\r│ col1 ┆ col2 │\r│ --- ┆ --- │\r│ str ┆ i64 │\r╞════════╪══════╡\r│ abc123 ┆ 1 │\r│ abcxyz ┆ 4 │\r└────────┴──────┘ Compute the dot/inner product (crossproduct) between two Series s = pl.Series(\u0026#34;a\u0026#34;, [1, 2, 3]) s2 = pl.Series(\u0026#34;b\u0026#34;, [4.0, 5.0, 6.0]) s.dot(s2) 32.0 Extract rows of a DataFrame in a list of tuples print(df.rows()) [(\u0026#39;abc123\u0026#39;, 1), (\u0026#39;def456\u0026#39;, 2), (\u0026#39;ghi789\u0026#39;, 3), (\u0026#39;abcxyz\u0026#39;, 4)] Get rowSums of a DataFrame df = pl.DataFrame({ \u0026#34;col1\u0026#34;: [1, 2, 3], \u0026#34;col2\u0026#34;: [4, 5, 6], \u0026#34;col3\u0026#34;: [7, 8, 9] }) df = df.with_columns(df.select(pl.sum_horizontal(\u0026#34;*\u0026#34;).alias(\u0026#34;row_sum\u0026#34;))) df.with_columns(df.select(pl.sum_horizontal([\u0026#34;col1\u0026#34;,\u0026#34;col2\u0026#34;]).alias(\u0026#34;row_sum\u0026#34;))) print(df) shape: (3, 4)\r┌──────┬──────┬──────┬─────────┐\r│ col1 ┆ col2 ┆ col3 ┆ row_sum │\r│ --- ┆ --- ┆ --- ┆ --- │\r│ i64 ┆ i64 ┆ i64 ┆ i64 │\r╞══════╪══════╪══════╪═════════╡\r│ 1 ┆ 4 ┆ 7 ┆ 12 │\r│ 2 ┆ 5 ┆ 8 ┆ 15 │\r│ 3 ┆ 6 ┆ 9 ┆ 18 │\r└──────┴──────┴──────┴─────────┘ head and tail print(df.head()) print(df.head(2)) print(df.tail()) print(df.tail(2)) shape: (3, 4)\r┌──────┬──────┬──────┬─────────┐\r│ col1 ┆ col2 ┆ col3 ┆ row_sum │\r│ --- ┆ --- ┆ --- ┆ --- │\r│ i64 ┆ i64 ┆ i64 ┆ i64 │\r╞══════╪══════╪══════╪═════════╡\r│ 1 ┆ 4 ┆ 7 ┆ 12 │\r│ 2 ┆ 5 ┆ 8 ┆ 15 │\r│ 3 ┆ 6 ┆ 9 ┆ 18 │\r└──────┴──────┴──────┴─────────┘\rshape: (2, 4)\r┌──────┬──────┬──────┬─────────┐\r│ col1 ┆ col2 ┆ col3 ┆ row_sum │\r│ --- ┆ --- ┆ --- ┆ --- │\r│ i64 ┆ i64 ┆ i64 ┆ i64 │\r╞══════╪══════╪══════╪═════════╡\r│ 1 ┆ 4 ┆ 7 ┆ 12 │\r│ 2 ┆ 5 ┆ 8 ┆ 15 │\r└──────┴──────┴──────┴─────────┘\rshape: (3, 4)\r┌──────┬──────┬──────┬─────────┐\r│ col1 ┆ col2 ┆ col3 ┆ row_sum │\r│ --- ┆ --- ┆ --- ┆ --- │\r│ i64 ┆ i64 ┆ i64 ┆ i64 │\r╞══════╪══════╪══════╪═════════╡\r│ 1 ┆ 4 ┆ 7 ┆ 12 │\r│ 2 ┆ 5 ┆ 8 ┆ 15 │\r│ 3 ┆ 6 ┆ 9 ┆ 18 │\r└──────┴──────┴──────┴─────────┘\rshape: (2, 4)\r┌──────┬──────┬──────┬─────────┐\r│ col1 ┆ col2 ┆ col3 ┆ row_sum │\r│ --- ┆ --- ┆ --- ┆ --- │\r│ i64 ┆ i64 ┆ i64 ┆ i64 │\r╞══════╪══════╪══════╪═════════╡\r│ 2 ┆ 5 ┆ 8 ┆ 15 │\r│ 3 ┆ 6 ┆ 9 ┆ 18 │\r└──────┴──────┴──────┴─────────┘ Matrix-vector multiplication import numpy as np a = pl.DataFrame({ \u0026#34;col1\u0026#34;: [5,1,3,2], \u0026#34;col2\u0026#34;: [1,1,1,3], \u0026#34;col3\u0026#34;: [1,2,1,4] }) b = [1, 2, 3] print(a.to_numpy().dot(b)) [10 9 8 20] ","permalink":"https://nilforooshan.github.io/blog/posts/polars-tutorial2/","summary":"\u003cp\u003eMost of these commands are derived with the help of ChatGPT or stackoverflow.\nHowever, it is easier to look for a command here rather than searching for the answers to these questions over and over again.\u003c/p\u003e\n\u003cp\u003eThere might be a few Python examples here not directly related to Polars!\u003c/p\u003e\n\u003ch2 id=\"read--as-missing-value\"\u003eRead \u003ccode\u003e.\u003c/code\u003e as missing value\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e polars \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e pl\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# df = pl.read_csv(\u0026#34;your_file.csv\u0026#34;, null_values=\u0026#34;.\u0026#34;, has_header = True)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"replace--with-missing-value\"\u003eReplace \u003ccode\u003e.\u003c/code\u003e with missing value\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AB456\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK789\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.\u0026#34;\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col3\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith_columns(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eString)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereplace({\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003eNone\u003c/span\u003e}))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (4, 3)\r\n┌───────┬──────┬──────┐\r\n│ col1  ┆ col2 ┆ col3 │\r\n│ ---   ┆ ---  ┆ ---  │\r\n│ str   ┆ i64  ┆ i64  │\r\n╞═══════╪══════╪══════╡\r\n│ null  ┆ 10   ┆ 1    │\r\n│ AB456 ┆ 20   ┆ 2    │\r\n│ GK789 ┆ 30   ┆ 3    │\r\n│ null  ┆ 40   ┆ 4    │\r\n└───────┴──────┴──────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"get-column-names\"\u003eGet column names\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK123\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AB456\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK789\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CD012\u0026#34;\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col3\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecolumns)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Get the last two columns\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecolumns[\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e:])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Get the first two columns\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecolumns[:\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e[\u0026#39;col1\u0026#39;, \u0026#39;col2\u0026#39;, \u0026#39;col3\u0026#39;]\r\n[\u0026#39;col2\u0026#39;, \u0026#39;col3\u0026#39;]\r\n[\u0026#39;col1\u0026#39;, \u0026#39;col2\u0026#39;]\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"change-values-in-a-column-based-on-a-condition-in-another-column\"\u003eChange values in a column based on a condition in another column\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK123\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AB456\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK789\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CD012\u0026#34;\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Replace values in \u0026#39;col2\u0026#39; based on the condition that \u0026#39;col1\u0026#39; starts with \u0026#39;GK\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith_columns(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewhen(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estr\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estarts_with(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ethen(\u003cspan style=\"color:#ae81ff\"\u003e999\u003c/span\u003e)  \u003cspan style=\"color:#75715e\"\u003e# Replace with your desired value\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eotherwise(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e))  \u003cspan style=\"color:#75715e\"\u003e# Keep original value if condition is not met\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ealias(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (4, 2)\r\n┌───────┬──────┐\r\n│ col1  ┆ col2 │\r\n│ ---   ┆ ---  │\r\n│ str   ┆ i64  │\r\n╞═══════╪══════╡\r\n│ GK123 ┆ 999  │\r\n│ AB456 ┆ 20   │\r\n│ GK789 ┆ 999  │\r\n│ CD012 ┆ 40   │\r\n└───────┴──────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"change-values-in-a-column-based-on-multiple-conditions-in-another-column\"\u003eChange values in a column based on multiple conditions in another column\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK123\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AB456\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK789\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CD012\u0026#34;\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e25\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Replace values in \u0026#39;col2\u0026#39; based on multiple conditions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith_columns(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewhen((pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estr\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estarts_with(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK\u0026#34;\u003c/span\u003e)) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e (pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ethen(\u003cspan style=\"color:#ae81ff\"\u003e999\u003c/span\u003e)  \u003cspan style=\"color:#75715e\"\u003e# Replace with your desired value\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eotherwise(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e))  \u003cspan style=\"color:#75715e\"\u003e# Keep original value if conditions are not met\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ealias(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK123\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AB456\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK789\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CD012\u0026#34;\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e25\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith_columns(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewhen(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ethen(\u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewhen(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e33\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ethen(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eotherwise(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ealias(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (4, 2)\r\n┌───────┬──────┐\r\n│ col1  ┆ col2 │\r\n│ ---   ┆ ---  │\r\n│ str   ┆ i64  │\r\n╞═══════╪══════╡\r\n│ GK123 ┆ 10   │\r\n│ AB456 ┆ 25   │\r\n│ GK789 ┆ 999  │\r\n│ CD012 ┆ 40   │\r\n└───────┴──────┘\r\nshape: (4, 2)\r\n┌───────┬──────┐\r\n│ col1  ┆ col2 │\r\n│ ---   ┆ ---  │\r\n│ str   ┆ i64  │\r\n╞═══════╪══════╡\r\n│ GK123 ┆ 20   │\r\n│ AB456 ┆ 25   │\r\n│ GK789 ┆ 30   │\r\n│ CD012 ┆ 80   │\r\n└───────┴──────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"extract-a-column-into-a-vector\"\u003eExtract a column into a vector\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecol1_vector \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eto_list()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(col1_vector)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e[\u0026#39;GK123\u0026#39;, \u0026#39;AB456\u0026#39;, \u0026#39;GK789\u0026#39;, \u0026#39;CD012\u0026#39;]\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"extract-values-meeting-a-condition-from-a-column\"\u003eExtract values meeting a condition from a column\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Extract values from \u0026#39;col1\u0026#39; that are greater than 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efiltered_values \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efilter(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eto_list()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(filtered_values)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e[2, 3]\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"get-the-dimension-of-the-dataframe\"\u003eGet the dimension of the DataFrame\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eshape\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e(3, 2)\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"paste-a-text-string-to-a-range-of-numbers\"\u003ePaste a text string to a range of numbers\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Generate the sequence from 1001 to 1010 and concatenate \u0026#34;DK\u0026#34; with each value\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eresult \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;DK\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e i\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e range(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(result)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eresult \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;DK\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e str(i) \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e range(\u003cspan style=\"color:#ae81ff\"\u003e1001\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1011\u003c/span\u003e)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(result)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e[\u0026#39;DK1001\u0026#39;, \u0026#39;DK1002\u0026#39;, \u0026#39;DK1003\u0026#39;, \u0026#39;DK1004\u0026#39;, \u0026#39;DK1005\u0026#39;, \u0026#39;DK1006\u0026#39;, \u0026#39;DK1007\u0026#39;, \u0026#39;DK1008\u0026#39;, \u0026#39;DK1009\u0026#39;, \u0026#39;DK1010\u0026#39;]\r\n[\u0026#39;DK1001\u0026#39;, \u0026#39;DK1002\u0026#39;, \u0026#39;DK1003\u0026#39;, \u0026#39;DK1004\u0026#39;, \u0026#39;DK1005\u0026#39;, \u0026#39;DK1006\u0026#39;, \u0026#39;DK1007\u0026#39;, \u0026#39;DK1008\u0026#39;, \u0026#39;DK1009\u0026#39;, \u0026#39;DK1010\u0026#39;]\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"remove-initial-characters-in-a-string-list\"\u003eRemove Initial characters in a string list\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estring_list \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AB123\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CD456\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;EF789\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GH012\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Remove the first two characters from each string\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emodified_list \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [s[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e:] \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e s \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e string_list]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(modified_list)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e[\u0026#39;123\u0026#39;, \u0026#39;456\u0026#39;, \u0026#39;789\u0026#39;, \u0026#39;012\u0026#39;]\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"copy-a-column-into-another-when-a-condition-is-met\"\u003eCopy a column into another when a condition is met\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK123\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AB456\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK789\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CD012\u0026#34;\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Copy \u0026#39;col2\u0026#39; to \u0026#39;col1\u0026#39; where \u0026#39;col1\u0026#39; starts with \u0026#39;GK\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith_columns(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewhen(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estr\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estarts_with(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ethen(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e))  \u003cspan style=\"color:#75715e\"\u003e# Copy \u0026#39;col2\u0026#39; value to \u0026#39;col1\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eotherwise(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e))  \u003cspan style=\"color:#75715e\"\u003e# Keep original \u0026#39;col1\u0026#39; value if condition is not met\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ealias(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (4, 2)\r\n┌───────┬──────┐\r\n│ col1  ┆ col2 │\r\n│ ---   ┆ ---  │\r\n│ str   ┆ i64  │\r\n╞═══════╪══════╡\r\n│ 10    ┆ 10   │\r\n│ AB456 ┆ 20   │\r\n│ 30    ┆ 30   │\r\n│ CD012 ┆ 40   │\r\n└───────┴──────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"copy-a-list-into-a-dataframe-column-when-a-condition-is-met\"\u003eCopy a list into a DataFrame column when a condition is met\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK123\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AB456\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK789\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CD012\u0026#34;\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enew_values \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;XY987\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ZW654\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;XY987\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ZW654\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Copy \u0026#39;new_values\u0026#39; to \u0026#39;col1\u0026#39; where \u0026#39;col1\u0026#39; starts with \u0026#39;GK\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith_columns(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewhen(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estr\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estarts_with(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ethen(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eSeries(new_values))  \u003cspan style=\"color:#75715e\"\u003e# Assign new values with the same shape\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eotherwise(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ealias(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (4, 2)\r\n┌───────┬──────┐\r\n│ col1  ┆ col2 │\r\n│ ---   ┆ ---  │\r\n│ str   ┆ i64  │\r\n╞═══════╪══════╡\r\n│ XY987 ┆ 10   │\r\n│ AB456 ┆ 20   │\r\n│ XY987 ┆ 30   │\r\n│ CD012 ┆ 40   │\r\n└───────┴──────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"copy-a-list-into-a-column\"\u003eCopy a list into a column\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith_columns(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eSeries(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e, new_values))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK123\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AB456\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GK789\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CD012\u0026#34;\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith_columns(col1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elit(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eSeries(new_values)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (4, 2)\r\n┌───────┬──────┐\r\n│ col1  ┆ col2 │\r\n│ ---   ┆ ---  │\r\n│ str   ┆ i64  │\r\n╞═══════╪══════╡\r\n│ XY987 ┆ 10   │\r\n│ ZW654 ┆ 20   │\r\n│ XY987 ┆ 30   │\r\n│ ZW654 ┆ 40   │\r\n└───────┴──────┘\r\nshape: (4, 2)\r\n┌───────┬──────┐\r\n│ col1  ┆ col2 │\r\n│ ---   ┆ ---  │\r\n│ str   ┆ i64  │\r\n╞═══════╪══════╡\r\n│ XY987 ┆ 10   │\r\n│ ZW654 ┆ 20   │\r\n│ XY987 ┆ 30   │\r\n│ ZW654 ┆ 40   │\r\n└───────┴──────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"copy-row-sums-rowsums-of-columns-a-and-b-into-column-a\"\u003eCopy row-sums (\u003ccode\u003erowSums\u003c/code\u003e) of columns \u0026ldquo;a\u0026rdquo; and \u0026ldquo;b\u0026rdquo; into column \u0026ldquo;a\u0026rdquo;\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Compute the row-wise sum of columns \u0026#34;a\u0026#34; and \u0026#34;b\u0026#34; and store it in column \u0026#34;a\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith_columns(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    (pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e))\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ealias(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (3, 2)\r\n┌─────┬─────┐\r\n│ a   ┆ b   │\r\n│ --- ┆ --- │\r\n│ i64 ┆ i64 │\r\n╞═════╪═════╡\r\n│ 5   ┆ 4   │\r\n│ 7   ┆ 5   │\r\n│ 9   ┆ 6   │\r\n└─────┴─────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"drop-columns-with-the-column-name-ending-with-a-pattern\"\u003eDrop columns with the column name ending with a pattern\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2_right\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col3\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col4_right\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Drop columns that end with \u0026#34;_right\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eselect([col \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e col \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecolumns \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e col\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eendswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;_right\u0026#34;\u003c/span\u003e)])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (3, 2)\r\n┌──────┬──────┐\r\n│ col1 ┆ col3 │\r\n│ ---  ┆ ---  │\r\n│ i64  ┆ i64  │\r\n╞══════╪══════╡\r\n│ 1    ┆ 7    │\r\n│ 2    ┆ 8    │\r\n│ 3    ┆ 9    │\r\n└──────┴──────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"rename-columns-with-the-column-name-ending-with-a-pattern\"\u003eRename columns with the column name ending with a pattern\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2_right\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col3\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col4_right\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Rename columns ending with \u0026#34;_right\u0026#34; to \u0026#34;d*\u0026#34; (d1, d2, ...)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enew_names \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecounter \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e col \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecolumns:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e col\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eendswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;_right\u0026#34;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        new_names[col] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;d\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ecounter\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        counter \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Apply the renaming\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erename(new_names)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2_right\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col3\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col4_right\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Create a dictionary to hold the renaming mappings\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enew_names \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Iterate through the columns and rename those ending with \u0026#34;_right\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e col \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecolumns:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e col\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eendswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;_right\u0026#34;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Extract the part before \u0026#34;_right\u0026#34; and prepend \u0026#34;d\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        base_name \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e col\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esplit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;_right\u0026#34;\u003c/span\u003e)[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        new_names[col] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;d\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ebase_name\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Apply the renaming\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erename(new_names)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (3, 4)\r\n┌──────┬─────┬──────┬─────┐\r\n│ col1 ┆ d1  ┆ col3 ┆ d2  │\r\n│ ---  ┆ --- ┆ ---  ┆ --- │\r\n│ i64  ┆ i64 ┆ i64  ┆ i64 │\r\n╞══════╪═════╪══════╪═════╡\r\n│ 1    ┆ 4   ┆ 7    ┆ 10  │\r\n│ 2    ┆ 5   ┆ 8    ┆ 11  │\r\n│ 3    ┆ 6   ┆ 9    ┆ 12  │\r\n└──────┴─────┴──────┴─────┘\r\nshape: (3, 4)\r\n┌──────┬───────┬──────┬───────┐\r\n│ col1 ┆ dcol2 ┆ col3 ┆ dcol4 │\r\n│ ---  ┆ ---   ┆ ---  ┆ ---   │\r\n│ i64  ┆ i64   ┆ i64  ┆ i64   │\r\n╞══════╪═══════╪══════╪═══════╡\r\n│ 1    ┆ 4     ┆ 7    ┆ 10    │\r\n│ 2    ┆ 5     ┆ 8    ┆ 11    │\r\n│ 3    ┆ 6     ┆ 9    ┆ 12    │\r\n└──────┴───────┴──────┴───────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"rename-columns-based-on-column-index\"\u003eRename columns based on column index\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;original1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;123-456\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;789-012\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;345-678\u0026#34;\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;original2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;original3\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Get the first two column names\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eold_names \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecolumns[:\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# New names for the first two columns\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enew_names \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Rename the first two columns\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erename({old_names[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]: new_names[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e], old_names[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]: new_names[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (3, 3)\r\n┌─────────┬──────┬───────────┐\r\n│ col1    ┆ col2 ┆ original3 │\r\n│ ---     ┆ ---  ┆ ---       │\r\n│ str     ┆ i64  ┆ i64       │\r\n╞═════════╪══════╪═══════════╡\r\n│ 123-456 ┆ 1    ┆ 10        │\r\n│ 789-012 ┆ 2    ┆ 20        │\r\n│ 345-678 ┆ 3    ┆ 30        │\r\n└─────────┴──────┴───────────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"rename-all-columns-with-a-list\"\u003eRename all columns with a list\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;old_name1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;old_name2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;old_name3\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# List of new column names\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enew_column_names \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;new_name1\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;new_name2\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;new_name3\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Rename all columns\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erename({old: new \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e old, new \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e zip(df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecolumns, new_column_names)})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (3, 3)\r\n┌───────────┬───────────┬───────────┐\r\n│ new_name1 ┆ new_name2 ┆ new_name3 │\r\n│ ---       ┆ ---       ┆ ---       │\r\n│ i64       ┆ i64       ┆ i64       │\r\n╞═══════════╪═══════════╪═══════════╡\r\n│ 1         ┆ 4         ┆ 7         │\r\n│ 2         ┆ 5         ┆ 8         │\r\n│ 3         ┆ 6         ┆ 9         │\r\n└───────────┴───────────┴───────────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"the-difference-between-strreplace-and-strreplace_all\"\u003eThe difference between \u003ccode\u003e.str.replace\u003c/code\u003e and \u003ccode\u003e.str.replace_all\u003c/code\u003e\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;123-456-34\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;789-012-78\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;345-678-02\u0026#34;\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Replace \u0026#34;-\u0026#34; with \u0026#34;\u0026#34; in the \u0026#34;col1\u0026#34; column\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith_columns(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estr\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereplace(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ealias(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;123-456\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;789-012\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;345-678\u0026#34;\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Replace \u0026#34;-\u0026#34; with \u0026#34;\u0026#34; in the \u0026#34;col1\u0026#34; column\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith_columns(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estr\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereplace_all(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ealias(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (3, 2)\r\n┌───────────┬──────┐\r\n│ col1      ┆ col2 │\r\n│ ---       ┆ ---  │\r\n│ str       ┆ i64  │\r\n╞═══════════╪══════╡\r\n│ 123456-34 ┆ 1    │\r\n│ 789012-78 ┆ 2    │\r\n│ 345678-02 ┆ 3    │\r\n└───────────┴──────┘\r\nshape: (3, 2)\r\n┌────────┬──────┐\r\n│ col1   ┆ col2 │\r\n│ ---    ┆ ---  │\r\n│ str    ┆ i64  │\r\n╞════════╪══════╡\r\n│ 123456 ┆ 1    │\r\n│ 789012 ┆ 2    │\r\n│ 345678 ┆ 3    │\r\n└────────┴──────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"read-specific-columns-from-a-csv-file\"\u003eRead specific columns from a CSV file\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# df = pl.read_csv(\u0026#34;data.csv\u0026#34;, columns=[0, 2])\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"replace-null-with-0-in-the-last-two-columns\"\u003eReplace null with 0 in the last two columns\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#66d9ef\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eNone\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col3\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Replace null with 0 in the last two columns\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith_columns(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecolumns[\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e:])\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efill_null(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (3, 3)\r\n┌──────┬──────┬──────┐\r\n│ col1 ┆ col2 ┆ col3 │\r\n│ ---  ┆ ---  ┆ ---  │\r\n│ i64  ┆ i64  ┆ i64  │\r\n╞══════╪══════╪══════╡\r\n│ 1    ┆ 0    ┆ 7    │\r\n│ 2    ┆ 5    ┆ 0    │\r\n│ 3    ┆ 0    ┆ 9    │\r\n└──────┴──────┴──────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"drop-the-first-two-characters-from-all-elements-in-a-dataframe\"\u003eDrop the first two characters from all elements in a DataFrame\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ab123\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ab456\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ab789\u0026#34;\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cd001\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cd002\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cd003\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Drop the first two characters from all elements in the DataFrame\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith_columns(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(c)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estr\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eslice(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e c \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecolumns]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Now, do the same, but turn the resulting elements into integers.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ab123\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ab456\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ab789\u0026#34;\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cd001\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cd002\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cd003\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Drop the first two characters and convert the remaining strings to integers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith_columns(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(c)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estr\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eslice(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecast(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eInt64) \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e c \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecolumns]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (3, 2)\r\n┌──────┬──────┐\r\n│ col1 ┆ col2 │\r\n│ ---  ┆ ---  │\r\n│ str  ┆ str  │\r\n╞══════╪══════╡\r\n│ 123  ┆ 001  │\r\n│ 456  ┆ 002  │\r\n│ 789  ┆ 003  │\r\n└──────┴──────┘\r\nshape: (3, 2)\r\n┌──────┬──────┐\r\n│ col1 ┆ col2 │\r\n│ ---  ┆ ---  │\r\n│ i64  ┆ i64  │\r\n╞══════╪══════╡\r\n│ 123  ┆ 1    │\r\n│ 456  ┆ 2    │\r\n│ 789  ┆ 3    │\r\n└──────┴──────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"drop-a-column-by-its-index-number\"\u003eDrop a column by its index number\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col3\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Drop the first column by its index (0)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edrop(df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecolumns[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (3, 2)\r\n┌──────┬──────┐\r\n│ col2 ┆ col3 │\r\n│ ---  ┆ ---  │\r\n│ i64  ┆ i64  │\r\n╞══════╪══════╡\r\n│ 4    ┆ 7    │\r\n│ 5    ┆ 8    │\r\n│ 6    ┆ 9    │\r\n└──────┴──────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"reorder-columns\"\u003eReorder columns\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eselect([\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;col3\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;col2\u0026#39;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003cstyle\u003e\r\n.dataframe \u003e thead \u003e tr,\r\n.dataframe \u003e tbody \u003e tr {\r\n  text-align: right;\r\n  white-space: pre-wrap;\r\n}\r\n\u003c/style\u003e\r\n\u003csmall\u003eshape: (3, 2)\u003c/small\u003e\u003ctable border=\"1\" class=\"dataframe\"\u003e\u003cthead\u003e\u003ctr\u003e\u003cth\u003ecol3\u003c/th\u003e\u003cth\u003ecol2\u003c/th\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003ei64\u003c/td\u003e\u003ctd\u003ei64\u003c/td\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e7\u003c/td\u003e\u003ctd\u003e4\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e8\u003c/td\u003e\u003ctd\u003e5\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e9\u003c/td\u003e\u003ctd\u003e6\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/div\u003e\r\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eselect([pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;col3\u0026#39;\u003c/span\u003e), pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;col2\u0026#39;\u003c/span\u003e)])\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003cstyle\u003e\r\n.dataframe \u003e thead \u003e tr,\r\n.dataframe \u003e tbody \u003e tr {\r\n  text-align: right;\r\n  white-space: pre-wrap;\r\n}\r\n\u003c/style\u003e\r\n\u003csmall\u003eshape: (3, 2)\u003c/small\u003e\u003ctable border=\"1\" class=\"dataframe\"\u003e\u003cthead\u003e\u003ctr\u003e\u003cth\u003ecol3\u003c/th\u003e\u003cth\u003ecol2\u003c/th\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003ei64\u003c/td\u003e\u003ctd\u003ei64\u003c/td\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e7\u003c/td\u003e\u003ctd\u003e4\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e8\u003c/td\u003e\u003ctd\u003e5\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e9\u003c/td\u003e\u003ctd\u003e6\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/div\u003e\r\n\u003ch2 id=\"reorder-dataframes-rows-by-matching-a-column-with-a-list\"\u003eReorder DataFrame\u0026rsquo;s rows by matching a column with a list\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;c\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;e\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;d\u0026#34;\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# The desired order for \u0026#34;col1\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edesired_order \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;c\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;d\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;e\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Reorder the DataFrame by matching \u0026#34;col1\u0026#34; with the desired_order list\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf_reordered \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith_columns(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emap_elements(\u003cspan style=\"color:#66d9ef\"\u003elambda\u003c/span\u003e x: desired_order\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eindex(x), return_dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eInt64)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ealias(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sort_key\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esort(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sort_key\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edrop(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sort_key\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df_reordered)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# or\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf_reordered \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: desired_order}), on \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df_reordered)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (5, 2)\r\n┌──────┬──────┐\r\n│ col1 ┆ col2 │\r\n│ ---  ┆ ---  │\r\n│ str  ┆ i64  │\r\n╞══════╪══════╡\r\n│ a    ┆ 3    │\r\n│ b    ┆ 1    │\r\n│ c    ┆ 2    │\r\n│ d    ┆ 5    │\r\n│ e    ┆ 4    │\r\n└──────┴──────┘\r\nshape: (5, 2)\r\n┌──────┬──────┐\r\n│ col1 ┆ col2 │\r\n│ ---  ┆ ---  │\r\n│ str  ┆ i64  │\r\n╞══════╪══════╡\r\n│ a    ┆ 3    │\r\n│ b    ┆ 1    │\r\n│ c    ┆ 2    │\r\n│ d    ┆ 5    │\r\n│ e    ┆ 4    │\r\n└──────┴──────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"filter-the-dataframe-for-elements-containing-a-pattern-in-a-column\"\u003eFilter the DataFrame for elements containing a pattern in a column\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;abc123\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;def456\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ghi789\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;abcxyz\u0026#34;\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter rows where \u0026#34;col1\u0026#34; contains the pattern \u0026#34;abc\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efiltered_df \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efilter(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecol(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estr\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003econtains(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;abc\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(filtered_df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (2, 2)\r\n┌────────┬──────┐\r\n│ col1   ┆ col2 │\r\n│ ---    ┆ ---  │\r\n│ str    ┆ i64  │\r\n╞════════╪══════╡\r\n│ abc123 ┆ 1    │\r\n│ abcxyz ┆ 4    │\r\n└────────┴──────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"compute-the-dotinner-product-crossproduct-between-two-series\"\u003eCompute the dot/inner product (crossproduct) between two Series\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003es \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eSeries(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e, [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003es2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eSeries(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e, [\u003cspan style=\"color:#ae81ff\"\u003e4.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6.0\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003es\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edot(s2)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e32.0\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"extract-rows-of-a-dataframe-in-a-list-of-tuples\"\u003eExtract rows of a DataFrame in a list of tuples\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erows())\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e[(\u0026#39;abc123\u0026#39;, 1), (\u0026#39;def456\u0026#39;, 2), (\u0026#39;ghi789\u0026#39;, 3), (\u0026#39;abcxyz\u0026#39;, 4)]\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"get-rowsums-of-a-dataframe\"\u003eGet \u003ccode\u003erowSums\u003c/code\u003e of a DataFrame\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col3\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith_columns(df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eselect(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esum_horizontal(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ealias(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;row_sum\u0026#34;\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewith_columns(df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eselect(pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esum_horizontal([\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e])\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ealias(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;row_sum\u0026#34;\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (3, 4)\r\n┌──────┬──────┬──────┬─────────┐\r\n│ col1 ┆ col2 ┆ col3 ┆ row_sum │\r\n│ ---  ┆ ---  ┆ ---  ┆ ---     │\r\n│ i64  ┆ i64  ┆ i64  ┆ i64     │\r\n╞══════╪══════╪══════╪═════════╡\r\n│ 1    ┆ 4    ┆ 7    ┆ 12      │\r\n│ 2    ┆ 5    ┆ 8    ┆ 15      │\r\n│ 3    ┆ 6    ┆ 9    ┆ 18      │\r\n└──────┴──────┴──────┴─────────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"head-and-tail\"\u003ehead and tail\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ehead())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ehead(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etail())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(df\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etail(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eshape: (3, 4)\r\n┌──────┬──────┬──────┬─────────┐\r\n│ col1 ┆ col2 ┆ col3 ┆ row_sum │\r\n│ ---  ┆ ---  ┆ ---  ┆ ---     │\r\n│ i64  ┆ i64  ┆ i64  ┆ i64     │\r\n╞══════╪══════╪══════╪═════════╡\r\n│ 1    ┆ 4    ┆ 7    ┆ 12      │\r\n│ 2    ┆ 5    ┆ 8    ┆ 15      │\r\n│ 3    ┆ 6    ┆ 9    ┆ 18      │\r\n└──────┴──────┴──────┴─────────┘\r\nshape: (2, 4)\r\n┌──────┬──────┬──────┬─────────┐\r\n│ col1 ┆ col2 ┆ col3 ┆ row_sum │\r\n│ ---  ┆ ---  ┆ ---  ┆ ---     │\r\n│ i64  ┆ i64  ┆ i64  ┆ i64     │\r\n╞══════╪══════╪══════╪═════════╡\r\n│ 1    ┆ 4    ┆ 7    ┆ 12      │\r\n│ 2    ┆ 5    ┆ 8    ┆ 15      │\r\n└──────┴──────┴──────┴─────────┘\r\nshape: (3, 4)\r\n┌──────┬──────┬──────┬─────────┐\r\n│ col1 ┆ col2 ┆ col3 ┆ row_sum │\r\n│ ---  ┆ ---  ┆ ---  ┆ ---     │\r\n│ i64  ┆ i64  ┆ i64  ┆ i64     │\r\n╞══════╪══════╪══════╪═════════╡\r\n│ 1    ┆ 4    ┆ 7    ┆ 12      │\r\n│ 2    ┆ 5    ┆ 8    ┆ 15      │\r\n│ 3    ┆ 6    ┆ 9    ┆ 18      │\r\n└──────┴──────┴──────┴─────────┘\r\nshape: (2, 4)\r\n┌──────┬──────┬──────┬─────────┐\r\n│ col1 ┆ col2 ┆ col3 ┆ row_sum │\r\n│ ---  ┆ ---  ┆ ---  ┆ ---     │\r\n│ i64  ┆ i64  ┆ i64  ┆ i64     │\r\n╞══════╪══════╪══════╪═════════╡\r\n│ 2    ┆ 5    ┆ 8    ┆ 15      │\r\n│ 3    ┆ 6    ┆ 9    ┆ 18      │\r\n└──────┴──────┴──────┴─────────┘\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"matrix-vector-multiplication\"\u003eMatrix-vector multiplication\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e numpy \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e np\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ea \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col1\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col2\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;col3\u0026#34;\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eb \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(a\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eto_numpy()\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edot(b))\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e[10  9  8 20]\n\u003c/code\u003e\u003c/pre\u003e","title":"Polars Tutorial2"},{"content":"A basic YAML header to start with. Choose the desired output format.\n--- title: \"RMarkdown Example\" author: \"Mohammad Ali Nilforooshan\" date: \"6 August 2017\" output: html_document # output: pdf_document # output: word_document --- ```{r setup, include=FALSE} knitr::opts_chunk$set(echo = TRUE) ``` horizontal rule *** or ---\nFormatting Manual line break: End the line with two or more spaces.\nitalic *italic* and italic _italic_\nbold **bold** and bold __bold__\nsuperscript2 superscript^2^\nsubscript2 subscript~2~\nstrikethrough ~~strikethrough~~\nlink [link](http://rmarkdown.rstudio.com)\nhttp://rmarkdown.rstudio.com \u0026lt;http://rmarkdown.rstudio.com\u0026gt;\nHeader 1 # Header 1 Header 2 ## Header 2 Header 3 ### Header 1 block quote \u0026gt; block quote\nendash: – --\nemdash: — ---\nellipsis: \u0026hellip; ...\nRoses are red. \u0026lt;span style=\u0026quot;color:red\u0026quot;\u0026gt;Roses are red.\u0026lt;/span\u0026gt;\nEquations (LaTeX) inline $equation$ inline $equation$\nDisplay equation $$ equation $$ $$ equation $$\nInsert Image image: image: ![](https://www.rstudio.com/wp-content/uploads/2016/09/RStudio-Logo-Blue-Gray-125.png)\nInserting a resized and centered image in the document:\n``` {r, out.width = \"120px\", echo=FALSE, fig.align='center'} knitr::include_graphics(\"imsage.png\") ``` Lists unordered list item 2 sub-item 1 sub-item 2 * unordered list * item 2 + sub-item 1 + sub-item 2 ordered list item 2 sub-item 1 sub-item 2 1. ordered list 2. item 2 + sub-item 1 + sub-item 2 Tables Table Header Second Header Table Cell Cell2 Cell 3 Cell4 Table Header | Second Header ------------- | ------------- Table Cell | Cell2 Cell 3 | Cell4 Codes This plain code is written inline.\nThis `plain code` is written inline. ``` This is a plain code block. ``` Evaluate the code inline.\nThere were `r nrow(cars)` cars studied. Show and evaluate the code.\n```{r cars} summary(cars) ``` Show the code, but do not evaluate it.\n```{r eval=FALSE} print(\"Don't run me\") ``` Embed a plot.\n```{r pressure, echo=FALSE} plot(pressure) ``` Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot.\ndisplay options option default effect eval TRUE Whether to evaluate the code and include its results echo TRUE Whether to display code along with its results warning TRUE Whether to display warnings error FALSE Whether to display errors message TRUE Whether to display messages tidy FALSE Whether to reformat code in a tidy way when displaying it results \u0026ldquo;markup\u0026rdquo; \u0026ldquo;markup\u0026rdquo;, \u0026ldquo;asis\u0026rdquo;, \u0026ldquo;hold\u0026rdquo;, or \u0026ldquo;hide\u0026rdquo; cache FALSE Whether to cache results for future renders comment \u0026ldquo;##\u0026rdquo; Comment character to preface results with fig.width 7 Width in inches for plots created in chunk fig.height 7 Height in inches for plots created in chunk For more details visit http://yihui.name/knitr/\nCentred text - PDF output only \\begin{center} centred text \\end{center} \\newline \\hfill Table of contents --- title: \u0026#34;Sample Document\u0026#34; output: html_document: toc: true theme: united --- It can be custmized further, such as toc_depth.\nIf you want to have the table of contents in a new page, drop toc and use some latex language.\n--- title: \u0026#34;Title\u0026#34; author: \u0026#34;Name\u0026#34; output: pdf_document --- \\newpage # adds new page after title \\tableofcontents # adds table of contents \\listoffigures \\listoftables \\newpage ","permalink":"https://nilforooshan.github.io/blog/posts/rmarkdown-cheat-sheet/","summary":"\u003cp\u003eA basic YAML header to start with.\nChoose the desired output format.\u003c/p\u003e\n\u003cpre\u003e\n---\ntitle: \"RMarkdown Example\"\nauthor: \"Mohammad Ali Nilforooshan\"\ndate: \"6 August 2017\"\noutput: html_document\n# output: pdf_document\n# output: word_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\u003c/pre\u003e\n\u003cp\u003ehorizontal rule \u003ccode\u003e***\u003c/code\u003e or \u003ccode\u003e---\u003c/code\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"formatting\"\u003eFormatting\u003c/h3\u003e\n\u003cp\u003eManual line break: End the line with two or more spaces.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eitalic\u003c/em\u003e \u003ccode\u003e*italic*\u003c/code\u003e and \u003cem\u003eitalic\u003c/em\u003e \u003ccode\u003e_italic_\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ebold\u003c/strong\u003e \u003ccode\u003e**bold**\u003c/code\u003e and \u003cstrong\u003ebold\u003c/strong\u003e \u003ccode\u003e__bold__\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003esuperscript\u003csup\u003e2\u003c/sup\u003e \u003ccode\u003esuperscript^2^\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003esubscript\u003csub\u003e2\u003c/sub\u003e \u003ccode\u003esubscript~2~\u003c/code\u003e\u003c/p\u003e","title":"RMarkdown cheat sheet"},{"content":"git config --global user.name \u0026#34;username\u0026#34; git config --global user.email \u0026#34;user@email.com\u0026#34; git config --global user.password \u0026#34;TOKEN\u0026#34; git config --global core.editor \u0026#34;vim\u0026#34; To see the Git configures do:\ngit config --list Use crediential helper so that Git does not ask for username and password (token) every time.\ngit config --global crediential.helper cache To unset the above (e.g., using a new token) do:\ngit config --global --unset crediential.helper ","permalink":"https://nilforooshan.github.io/blog/posts/set-git-configuration-variables/","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit config --global user.name \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit config --global user.email \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;user@email.com\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit config --global user.password \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;TOKEN\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit config --global core.editor \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;vim\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo see the Git configures do:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit config --list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eUse crediential helper so that Git does not ask for username and password (token) every time.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit config --global crediential.helper cache\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo unset the above (e.g., using a new token) do:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit config --global --unset crediential.helper\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Set git configuration variables"},{"content":"Heritability ($\\text h^2$) has biological and statistical definitions. Statistically, heritability is the proportion of the phenotypic variation explained by the genetic variation in the population. Let\u0026rsquo;s start with an example! I took example 3.1 from Mrode (2005). This example is about estimating fixed effects (sex) solutions and predicting breeding values of animals for pre-weaning gain (WWG) of beef calves. The data is presented in the following table:\nCalf Sex Sire Dam WWG (kg) 4 Male 1 Unknown 4.5 5 Female 3 2 2.9 6 Female 1 2 3.9 7 Male 4 5 3.5 8 Male 3 6 5.0 In an Animal Model BLUP, the inverse of the relationship matrix ($\\mathbf A^{-1}$) is multiplied by $\\lambda = (1 - \\text h^2)/\\text h^2$ (equal to $(4 - \\text h^2)/\\text h^2$ in a Sire Model BLUP). Considering $\\text h^2$ = 1/3 (λ = 2), the following solutions are obtained from BLUP:\nEffects Solutions Sex Male 4.359 Female 3.404 Animal 1 0.098 2 -0.019 3 -0.041 4 -0.009 5 -0.186 6 0.177 7 -0.249 8 0.183 With $\\text h^2$ = 0.5 (λ = 1), the solutions change to:\nEffects Solutions Sex male 4.373 female 3.412 Animal 1 0.148 2 -0.034 3 -0.060 4 -0.007 5 -0.283 6 0.260 7 -0.388 8 0.275 The ranking of animals did not change. However, the range of breeding values changed from -0.249–0.183 to -0.388–0.275.\nBLUP regresses the estimated breeding values based on phenotype and relationship information toward the mean of the founder population (0). Let\u0026rsquo;s consider $\\text h^2$ = 0.001. The solutions change to:\nEffects Solutions Sex male 4.333 female 3.400 Animal 1 0.000 2 0.000 3 0.000 4 0.000 5 -0.001 6 0.001 7 -0.001 8 0.001 The range of breeding values becomes -0.001 to 0.001. The genetic variance got close to 0, and the breeding values heavily regressed toward 0. On the other hand, as the heritability gets closer to 1, the genetic variance gets closer to the phenotypic variance. Let\u0026rsquo;s consider h2 = 0.999. The solutions change to:\nEffects Solutions Sex male 4.443 female 3.491 Animal 1 0.281 2 -0.140 3 -0.085 4 0.056 5 -0.591 6 0.409 7 -0.942 8 0.556 Calculating $\\mathbf y - \\mathbf X \\hat{\\mathbf b}$ = {0.057, -0.591, 0.409, -0.943, 0.557}, we realise it is very close to the estimated breeding values of the phenotyped animals (animals 4–9).\n","permalink":"https://nilforooshan.github.io/blog/posts/h2/","summary":"\u003cp\u003eHeritability ($\\text h^2$) has biological and statistical definitions.\nStatistically, heritability is the proportion of the phenotypic variation explained by the genetic variation in the population.\nLet\u0026rsquo;s start with an example!\nI took example 3.1 from \u003ca href=\"https://www.cabidigitallibrary.org/doi/book/10.1079/9780851990002.0000\"\u003eMrode (2005)\u003c/a\u003e.\nThis example is about estimating fixed effects (sex) solutions and predicting breeding values of animals for pre-weaning gain (WWG) of beef calves.\nThe data is presented in the following table:\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003eCalf\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eSex\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003eSire\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003eDam\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003eWWG (kg)\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e4\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eMale\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003eUnknown\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e4.5\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e5\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eFemale\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e3\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e2\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e2.9\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e6\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eFemale\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e2\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e3.9\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e7\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eMale\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e4\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e5\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e3.5\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e8\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eMale\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e3\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e6\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e5.0\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eIn an Animal Model BLUP, the inverse of the relationship matrix ($\\mathbf A^{-1}$) is multiplied by $\\lambda = (1 - \\text h^2)/\\text h^2$ (equal to $(4 - \\text h^2)/\\text h^2$ in a Sire Model BLUP).\nConsidering $\\text h^2$ = 1/3 (λ = 2), the following solutions are obtained from BLUP:\u003c/p\u003e","title":"What does heritability do in BLUP?"}]